// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/stravaaccount"
)

// StravaAccount is the model entity for the StravaAccount schema.
type StravaAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AthleteID holds the value of the "athlete_id" field.
	AthleteID int64 `json:"athlete_id,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken string `json:"refresh_token,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Profile holds the value of the "profile" field.
	Profile string `json:"profile,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StravaAccountQuery when eager-loading is set.
	Edges        StravaAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StravaAccountEdges holds the relations/edges for other nodes in the graph.
type StravaAccountEdges struct {
	// CdcAuthUsers holds the value of the cdc_auth_users edge.
	CdcAuthUsers []*CdcAuthUsers `json:"cdc_auth_users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CdcAuthUsersOrErr returns the CdcAuthUsers value or an error if the edge
// was not loaded in eager-loading.
func (e StravaAccountEdges) CdcAuthUsersOrErr() ([]*CdcAuthUsers, error) {
	if e.loadedTypes[0] {
		return e.CdcAuthUsers, nil
	}
	return nil, &NotLoadedError{edge: "cdc_auth_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StravaAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stravaaccount.FieldAthleteID:
			values[i] = new(sql.NullInt64)
		case stravaaccount.FieldAccessToken, stravaaccount.FieldRefreshToken, stravaaccount.FieldProfile, stravaaccount.FieldUsername, stravaaccount.FieldFirstName, stravaaccount.FieldLastName:
			values[i] = new(sql.NullString)
		case stravaaccount.FieldExpiresAt, stravaaccount.FieldCreatedAt, stravaaccount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case stravaaccount.FieldID, stravaaccount.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StravaAccount fields.
func (sa *StravaAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stravaaccount.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sa.ID = *value
			}
		case stravaaccount.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				sa.UserID = *value
			}
		case stravaaccount.FieldAthleteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field athlete_id", values[i])
			} else if value.Valid {
				sa.AthleteID = value.Int64
			}
		case stravaaccount.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				sa.AccessToken = value.String
			}
		case stravaaccount.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				sa.RefreshToken = value.String
			}
		case stravaaccount.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				sa.ExpiresAt = value.Time
			}
		case stravaaccount.FieldProfile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile", values[i])
			} else if value.Valid {
				sa.Profile = value.String
			}
		case stravaaccount.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				sa.Username = value.String
			}
		case stravaaccount.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				sa.FirstName = value.String
			}
		case stravaaccount.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				sa.LastName = value.String
			}
		case stravaaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sa.CreatedAt = value.Time
			}
		case stravaaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sa.UpdatedAt = value.Time
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StravaAccount.
// This includes values selected through modifiers, order, etc.
func (sa *StravaAccount) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// QueryCdcAuthUsers queries the "cdc_auth_users" edge of the StravaAccount entity.
func (sa *StravaAccount) QueryCdcAuthUsers() *CdcAuthUsersQuery {
	return NewStravaAccountClient(sa.config).QueryCdcAuthUsers(sa)
}

// Update returns a builder for updating this StravaAccount.
// Note that you need to call StravaAccount.Unwrap() before calling this method if this StravaAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *StravaAccount) Update() *StravaAccountUpdateOne {
	return NewStravaAccountClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the StravaAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *StravaAccount) Unwrap() *StravaAccount {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: StravaAccount is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *StravaAccount) String() string {
	var builder strings.Builder
	builder.WriteString("StravaAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.UserID))
	builder.WriteString(", ")
	builder.WriteString("athlete_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.AthleteID))
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(sa.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("refresh_token=")
	builder.WriteString(sa.RefreshToken)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(sa.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("profile=")
	builder.WriteString(sa.Profile)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(sa.Username)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(sa.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(sa.LastName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sa.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StravaAccounts is a parsable slice of StravaAccount.
type StravaAccounts []*StravaAccount
