// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/cdcauthusers"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/stravaactivity"
)

// StravaActivityCreate is the builder for creating a StravaActivity entity.
type StravaActivityCreate struct {
	config
	mutation *StravaActivityMutation
	hooks    []Hook
}

// SetStravaAccountID sets the "strava_account_id" field.
func (sac *StravaActivityCreate) SetStravaAccountID(i int64) *StravaActivityCreate {
	sac.mutation.SetStravaAccountID(i)
	return sac
}

// SetAthleteID sets the "athlete_id" field.
func (sac *StravaActivityCreate) SetAthleteID(i int64) *StravaActivityCreate {
	sac.mutation.SetAthleteID(i)
	return sac
}

// SetUserID sets the "user_id" field.
func (sac *StravaActivityCreate) SetUserID(u uuid.UUID) *StravaActivityCreate {
	sac.mutation.SetUserID(u)
	return sac
}

// SetActivityName sets the "activity_name" field.
func (sac *StravaActivityCreate) SetActivityName(s string) *StravaActivityCreate {
	sac.mutation.SetActivityName(s)
	return sac
}

// SetActivityType sets the "activity_type" field.
func (sac *StravaActivityCreate) SetActivityType(i int) *StravaActivityCreate {
	sac.mutation.SetActivityType(i)
	return sac
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (sac *StravaActivityCreate) SetNillableActivityType(i *int) *StravaActivityCreate {
	if i != nil {
		sac.SetActivityType(*i)
	}
	return sac
}

// SetActivityURL sets the "activity_url" field.
func (sac *StravaActivityCreate) SetActivityURL(s string) *StravaActivityCreate {
	sac.mutation.SetActivityURL(s)
	return sac
}

// SetStartDate sets the "start_date" field.
func (sac *StravaActivityCreate) SetStartDate(t time.Time) *StravaActivityCreate {
	sac.mutation.SetStartDate(t)
	return sac
}

// SetDistance sets the "distance" field.
func (sac *StravaActivityCreate) SetDistance(f float64) *StravaActivityCreate {
	sac.mutation.SetDistance(f)
	return sac
}

// SetNillableDistance sets the "distance" field if the given value is not nil.
func (sac *StravaActivityCreate) SetNillableDistance(f *float64) *StravaActivityCreate {
	if f != nil {
		sac.SetDistance(*f)
	}
	return sac
}

// SetMovingTime sets the "moving_time" field.
func (sac *StravaActivityCreate) SetMovingTime(i int32) *StravaActivityCreate {
	sac.mutation.SetMovingTime(i)
	return sac
}

// SetNillableMovingTime sets the "moving_time" field if the given value is not nil.
func (sac *StravaActivityCreate) SetNillableMovingTime(i *int32) *StravaActivityCreate {
	if i != nil {
		sac.SetMovingTime(*i)
	}
	return sac
}

// SetElapsedTime sets the "elapsed_time" field.
func (sac *StravaActivityCreate) SetElapsedTime(i int32) *StravaActivityCreate {
	sac.mutation.SetElapsedTime(i)
	return sac
}

// SetNillableElapsedTime sets the "elapsed_time" field if the given value is not nil.
func (sac *StravaActivityCreate) SetNillableElapsedTime(i *int32) *StravaActivityCreate {
	if i != nil {
		sac.SetElapsedTime(*i)
	}
	return sac
}

// SetTotalElevationGain sets the "total_elevation_gain" field.
func (sac *StravaActivityCreate) SetTotalElevationGain(i int32) *StravaActivityCreate {
	sac.mutation.SetTotalElevationGain(i)
	return sac
}

// SetNillableTotalElevationGain sets the "total_elevation_gain" field if the given value is not nil.
func (sac *StravaActivityCreate) SetNillableTotalElevationGain(i *int32) *StravaActivityCreate {
	if i != nil {
		sac.SetTotalElevationGain(*i)
	}
	return sac
}

// SetAverageSpeed sets the "average_speed" field.
func (sac *StravaActivityCreate) SetAverageSpeed(f float64) *StravaActivityCreate {
	sac.mutation.SetAverageSpeed(f)
	return sac
}

// SetNillableAverageSpeed sets the "average_speed" field if the given value is not nil.
func (sac *StravaActivityCreate) SetNillableAverageSpeed(f *float64) *StravaActivityCreate {
	if f != nil {
		sac.SetAverageSpeed(*f)
	}
	return sac
}

// SetMaxSpeed sets the "max_speed" field.
func (sac *StravaActivityCreate) SetMaxSpeed(f float64) *StravaActivityCreate {
	sac.mutation.SetMaxSpeed(f)
	return sac
}

// SetNillableMaxSpeed sets the "max_speed" field if the given value is not nil.
func (sac *StravaActivityCreate) SetNillableMaxSpeed(f *float64) *StravaActivityCreate {
	if f != nil {
		sac.SetMaxSpeed(*f)
	}
	return sac
}

// SetCreatedAt sets the "created_at" field.
func (sac *StravaActivityCreate) SetCreatedAt(t time.Time) *StravaActivityCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sac *StravaActivityCreate) SetNillableCreatedAt(t *time.Time) *StravaActivityCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetID sets the "id" field.
func (sac *StravaActivityCreate) SetID(u uuid.UUID) *StravaActivityCreate {
	sac.mutation.SetID(u)
	return sac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sac *StravaActivityCreate) SetNillableID(u *uuid.UUID) *StravaActivityCreate {
	if u != nil {
		sac.SetID(*u)
	}
	return sac
}

// SetCdcAuthUsersID sets the "cdc_auth_users" edge to the CdcAuthUsers entity by ID.
func (sac *StravaActivityCreate) SetCdcAuthUsersID(id uuid.UUID) *StravaActivityCreate {
	sac.mutation.SetCdcAuthUsersID(id)
	return sac
}

// SetCdcAuthUsers sets the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (sac *StravaActivityCreate) SetCdcAuthUsers(c *CdcAuthUsers) *StravaActivityCreate {
	return sac.SetCdcAuthUsersID(c.ID)
}

// Mutation returns the StravaActivityMutation object of the builder.
func (sac *StravaActivityCreate) Mutation() *StravaActivityMutation {
	return sac.mutation
}

// Save creates the StravaActivity in the database.
func (sac *StravaActivityCreate) Save(ctx context.Context) (*StravaActivity, error) {
	sac.defaults()
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *StravaActivityCreate) SaveX(ctx context.Context) *StravaActivity {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *StravaActivityCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *StravaActivityCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *StravaActivityCreate) defaults() {
	if _, ok := sac.mutation.ActivityType(); !ok {
		v := stravaactivity.DefaultActivityType
		sac.mutation.SetActivityType(v)
	}
	if _, ok := sac.mutation.Distance(); !ok {
		v := stravaactivity.DefaultDistance
		sac.mutation.SetDistance(v)
	}
	if _, ok := sac.mutation.MovingTime(); !ok {
		v := stravaactivity.DefaultMovingTime
		sac.mutation.SetMovingTime(v)
	}
	if _, ok := sac.mutation.ElapsedTime(); !ok {
		v := stravaactivity.DefaultElapsedTime
		sac.mutation.SetElapsedTime(v)
	}
	if _, ok := sac.mutation.TotalElevationGain(); !ok {
		v := stravaactivity.DefaultTotalElevationGain
		sac.mutation.SetTotalElevationGain(v)
	}
	if _, ok := sac.mutation.AverageSpeed(); !ok {
		v := stravaactivity.DefaultAverageSpeed
		sac.mutation.SetAverageSpeed(v)
	}
	if _, ok := sac.mutation.MaxSpeed(); !ok {
		v := stravaactivity.DefaultMaxSpeed
		sac.mutation.SetMaxSpeed(v)
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		v := stravaactivity.DefaultCreatedAt
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.ID(); !ok {
		v := stravaactivity.DefaultID()
		sac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *StravaActivityCreate) check() error {
	if _, ok := sac.mutation.StravaAccountID(); !ok {
		return &ValidationError{Name: "strava_account_id", err: errors.New(`ent: missing required field "StravaActivity.strava_account_id"`)}
	}
	if _, ok := sac.mutation.AthleteID(); !ok {
		return &ValidationError{Name: "athlete_id", err: errors.New(`ent: missing required field "StravaActivity.athlete_id"`)}
	}
	if _, ok := sac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "StravaActivity.user_id"`)}
	}
	if _, ok := sac.mutation.ActivityName(); !ok {
		return &ValidationError{Name: "activity_name", err: errors.New(`ent: missing required field "StravaActivity.activity_name"`)}
	}
	if v, ok := sac.mutation.ActivityName(); ok {
		if err := stravaactivity.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "StravaActivity.activity_name": %w`, err)}
		}
	}
	if _, ok := sac.mutation.ActivityType(); !ok {
		return &ValidationError{Name: "activity_type", err: errors.New(`ent: missing required field "StravaActivity.activity_type"`)}
	}
	if _, ok := sac.mutation.ActivityURL(); !ok {
		return &ValidationError{Name: "activity_url", err: errors.New(`ent: missing required field "StravaActivity.activity_url"`)}
	}
	if v, ok := sac.mutation.ActivityURL(); ok {
		if err := stravaactivity.ActivityURLValidator(v); err != nil {
			return &ValidationError{Name: "activity_url", err: fmt.Errorf(`ent: validator failed for field "StravaActivity.activity_url": %w`, err)}
		}
	}
	if _, ok := sac.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "StravaActivity.start_date"`)}
	}
	if _, ok := sac.mutation.Distance(); !ok {
		return &ValidationError{Name: "distance", err: errors.New(`ent: missing required field "StravaActivity.distance"`)}
	}
	if _, ok := sac.mutation.MovingTime(); !ok {
		return &ValidationError{Name: "moving_time", err: errors.New(`ent: missing required field "StravaActivity.moving_time"`)}
	}
	if _, ok := sac.mutation.ElapsedTime(); !ok {
		return &ValidationError{Name: "elapsed_time", err: errors.New(`ent: missing required field "StravaActivity.elapsed_time"`)}
	}
	if _, ok := sac.mutation.TotalElevationGain(); !ok {
		return &ValidationError{Name: "total_elevation_gain", err: errors.New(`ent: missing required field "StravaActivity.total_elevation_gain"`)}
	}
	if _, ok := sac.mutation.AverageSpeed(); !ok {
		return &ValidationError{Name: "average_speed", err: errors.New(`ent: missing required field "StravaActivity.average_speed"`)}
	}
	if _, ok := sac.mutation.MaxSpeed(); !ok {
		return &ValidationError{Name: "max_speed", err: errors.New(`ent: missing required field "StravaActivity.max_speed"`)}
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StravaActivity.created_at"`)}
	}
	if len(sac.mutation.CdcAuthUsersIDs()) == 0 {
		return &ValidationError{Name: "cdc_auth_users", err: errors.New(`ent: missing required edge "StravaActivity.cdc_auth_users"`)}
	}
	return nil
}

func (sac *StravaActivityCreate) sqlSave(ctx context.Context) (*StravaActivity, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *StravaActivityCreate) createSpec() (*StravaActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &StravaActivity{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(stravaactivity.Table, sqlgraph.NewFieldSpec(stravaactivity.FieldID, field.TypeUUID))
	)
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sac.mutation.StravaAccountID(); ok {
		_spec.SetField(stravaactivity.FieldStravaAccountID, field.TypeInt64, value)
		_node.StravaAccountID = value
	}
	if value, ok := sac.mutation.AthleteID(); ok {
		_spec.SetField(stravaactivity.FieldAthleteID, field.TypeInt64, value)
		_node.AthleteID = value
	}
	if value, ok := sac.mutation.ActivityName(); ok {
		_spec.SetField(stravaactivity.FieldActivityName, field.TypeString, value)
		_node.ActivityName = value
	}
	if value, ok := sac.mutation.ActivityType(); ok {
		_spec.SetField(stravaactivity.FieldActivityType, field.TypeInt, value)
		_node.ActivityType = value
	}
	if value, ok := sac.mutation.ActivityURL(); ok {
		_spec.SetField(stravaactivity.FieldActivityURL, field.TypeString, value)
		_node.ActivityURL = value
	}
	if value, ok := sac.mutation.StartDate(); ok {
		_spec.SetField(stravaactivity.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := sac.mutation.Distance(); ok {
		_spec.SetField(stravaactivity.FieldDistance, field.TypeFloat64, value)
		_node.Distance = value
	}
	if value, ok := sac.mutation.MovingTime(); ok {
		_spec.SetField(stravaactivity.FieldMovingTime, field.TypeInt32, value)
		_node.MovingTime = value
	}
	if value, ok := sac.mutation.ElapsedTime(); ok {
		_spec.SetField(stravaactivity.FieldElapsedTime, field.TypeInt32, value)
		_node.ElapsedTime = value
	}
	if value, ok := sac.mutation.TotalElevationGain(); ok {
		_spec.SetField(stravaactivity.FieldTotalElevationGain, field.TypeInt32, value)
		_node.TotalElevationGain = value
	}
	if value, ok := sac.mutation.AverageSpeed(); ok {
		_spec.SetField(stravaactivity.FieldAverageSpeed, field.TypeFloat64, value)
		_node.AverageSpeed = value
	}
	if value, ok := sac.mutation.MaxSpeed(); ok {
		_spec.SetField(stravaactivity.FieldMaxSpeed, field.TypeFloat64, value)
		_node.MaxSpeed = value
	}
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.SetField(stravaactivity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sac.mutation.CdcAuthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stravaactivity.CdcAuthUsersTable,
			Columns: []string{stravaactivity.CdcAuthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StravaActivityCreateBulk is the builder for creating many StravaActivity entities in bulk.
type StravaActivityCreateBulk struct {
	config
	err      error
	builders []*StravaActivityCreate
}

// Save creates the StravaActivity entities in the database.
func (sacb *StravaActivityCreateBulk) Save(ctx context.Context) ([]*StravaActivity, error) {
	if sacb.err != nil {
		return nil, sacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*StravaActivity, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StravaActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *StravaActivityCreateBulk) SaveX(ctx context.Context) []*StravaActivity {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *StravaActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *StravaActivityCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
