// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/cdcauthusers"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/stravaaccount"
)

// StravaAccountCreate is the builder for creating a StravaAccount entity.
type StravaAccountCreate struct {
	config
	mutation *StravaAccountMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sac *StravaAccountCreate) SetUserID(u uuid.UUID) *StravaAccountCreate {
	sac.mutation.SetUserID(u)
	return sac
}

// SetAthleteID sets the "athlete_id" field.
func (sac *StravaAccountCreate) SetAthleteID(i int64) *StravaAccountCreate {
	sac.mutation.SetAthleteID(i)
	return sac
}

// SetAccessToken sets the "access_token" field.
func (sac *StravaAccountCreate) SetAccessToken(s string) *StravaAccountCreate {
	sac.mutation.SetAccessToken(s)
	return sac
}

// SetRefreshToken sets the "refresh_token" field.
func (sac *StravaAccountCreate) SetRefreshToken(s string) *StravaAccountCreate {
	sac.mutation.SetRefreshToken(s)
	return sac
}

// SetExpiresAt sets the "expires_at" field.
func (sac *StravaAccountCreate) SetExpiresAt(t time.Time) *StravaAccountCreate {
	sac.mutation.SetExpiresAt(t)
	return sac
}

// SetProfile sets the "profile" field.
func (sac *StravaAccountCreate) SetProfile(s string) *StravaAccountCreate {
	sac.mutation.SetProfile(s)
	return sac
}

// SetUsername sets the "username" field.
func (sac *StravaAccountCreate) SetUsername(s string) *StravaAccountCreate {
	sac.mutation.SetUsername(s)
	return sac
}

// SetFirstName sets the "first_name" field.
func (sac *StravaAccountCreate) SetFirstName(s string) *StravaAccountCreate {
	sac.mutation.SetFirstName(s)
	return sac
}

// SetLastName sets the "last_name" field.
func (sac *StravaAccountCreate) SetLastName(s string) *StravaAccountCreate {
	sac.mutation.SetLastName(s)
	return sac
}

// SetCreatedAt sets the "created_at" field.
func (sac *StravaAccountCreate) SetCreatedAt(t time.Time) *StravaAccountCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sac *StravaAccountCreate) SetNillableCreatedAt(t *time.Time) *StravaAccountCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetUpdatedAt sets the "updated_at" field.
func (sac *StravaAccountCreate) SetUpdatedAt(t time.Time) *StravaAccountCreate {
	sac.mutation.SetUpdatedAt(t)
	return sac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sac *StravaAccountCreate) SetNillableUpdatedAt(t *time.Time) *StravaAccountCreate {
	if t != nil {
		sac.SetUpdatedAt(*t)
	}
	return sac
}

// SetID sets the "id" field.
func (sac *StravaAccountCreate) SetID(u uuid.UUID) *StravaAccountCreate {
	sac.mutation.SetID(u)
	return sac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sac *StravaAccountCreate) SetNillableID(u *uuid.UUID) *StravaAccountCreate {
	if u != nil {
		sac.SetID(*u)
	}
	return sac
}

// SetCdcAuthUsersID sets the "cdc_auth_users" edge to the CdcAuthUsers entity by ID.
func (sac *StravaAccountCreate) SetCdcAuthUsersID(id uuid.UUID) *StravaAccountCreate {
	sac.mutation.SetCdcAuthUsersID(id)
	return sac
}

// SetCdcAuthUsers sets the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (sac *StravaAccountCreate) SetCdcAuthUsers(c *CdcAuthUsers) *StravaAccountCreate {
	return sac.SetCdcAuthUsersID(c.ID)
}

// Mutation returns the StravaAccountMutation object of the builder.
func (sac *StravaAccountCreate) Mutation() *StravaAccountMutation {
	return sac.mutation
}

// Save creates the StravaAccount in the database.
func (sac *StravaAccountCreate) Save(ctx context.Context) (*StravaAccount, error) {
	sac.defaults()
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *StravaAccountCreate) SaveX(ctx context.Context) *StravaAccount {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *StravaAccountCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *StravaAccountCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *StravaAccountCreate) defaults() {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		v := stravaaccount.DefaultCreatedAt
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		v := stravaaccount.DefaultUpdatedAt
		sac.mutation.SetUpdatedAt(v)
	}
	if _, ok := sac.mutation.ID(); !ok {
		v := stravaaccount.DefaultID()
		sac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *StravaAccountCreate) check() error {
	if _, ok := sac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "StravaAccount.user_id"`)}
	}
	if _, ok := sac.mutation.AthleteID(); !ok {
		return &ValidationError{Name: "athlete_id", err: errors.New(`ent: missing required field "StravaAccount.athlete_id"`)}
	}
	if _, ok := sac.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "StravaAccount.access_token"`)}
	}
	if v, ok := sac.mutation.AccessToken(); ok {
		if err := stravaaccount.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.access_token": %w`, err)}
		}
	}
	if _, ok := sac.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`ent: missing required field "StravaAccount.refresh_token"`)}
	}
	if v, ok := sac.mutation.RefreshToken(); ok {
		if err := stravaaccount.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.refresh_token": %w`, err)}
		}
	}
	if _, ok := sac.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "StravaAccount.expires_at"`)}
	}
	if _, ok := sac.mutation.Profile(); !ok {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required field "StravaAccount.profile"`)}
	}
	if v, ok := sac.mutation.Profile(); ok {
		if err := stravaaccount.ProfileValidator(v); err != nil {
			return &ValidationError{Name: "profile", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.profile": %w`, err)}
		}
	}
	if _, ok := sac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "StravaAccount.username"`)}
	}
	if v, ok := sac.mutation.Username(); ok {
		if err := stravaaccount.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.username": %w`, err)}
		}
	}
	if _, ok := sac.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "StravaAccount.first_name"`)}
	}
	if v, ok := sac.mutation.FirstName(); ok {
		if err := stravaaccount.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.first_name": %w`, err)}
		}
	}
	if _, ok := sac.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "StravaAccount.last_name"`)}
	}
	if v, ok := sac.mutation.LastName(); ok {
		if err := stravaaccount.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.last_name": %w`, err)}
		}
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StravaAccount.created_at"`)}
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StravaAccount.updated_at"`)}
	}
	if len(sac.mutation.CdcAuthUsersIDs()) == 0 {
		return &ValidationError{Name: "cdc_auth_users", err: errors.New(`ent: missing required edge "StravaAccount.cdc_auth_users"`)}
	}
	return nil
}

func (sac *StravaAccountCreate) sqlSave(ctx context.Context) (*StravaAccount, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *StravaAccountCreate) createSpec() (*StravaAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &StravaAccount{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(stravaaccount.Table, sqlgraph.NewFieldSpec(stravaaccount.FieldID, field.TypeUUID))
	)
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sac.mutation.AthleteID(); ok {
		_spec.SetField(stravaaccount.FieldAthleteID, field.TypeInt64, value)
		_node.AthleteID = value
	}
	if value, ok := sac.mutation.AccessToken(); ok {
		_spec.SetField(stravaaccount.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := sac.mutation.RefreshToken(); ok {
		_spec.SetField(stravaaccount.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := sac.mutation.ExpiresAt(); ok {
		_spec.SetField(stravaaccount.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := sac.mutation.Profile(); ok {
		_spec.SetField(stravaaccount.FieldProfile, field.TypeString, value)
		_node.Profile = value
	}
	if value, ok := sac.mutation.Username(); ok {
		_spec.SetField(stravaaccount.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := sac.mutation.FirstName(); ok {
		_spec.SetField(stravaaccount.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := sac.mutation.LastName(); ok {
		_spec.SetField(stravaaccount.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.SetField(stravaaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sac.mutation.UpdatedAt(); ok {
		_spec.SetField(stravaaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sac.mutation.CdcAuthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stravaaccount.CdcAuthUsersTable,
			Columns: []string{stravaaccount.CdcAuthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StravaAccountCreateBulk is the builder for creating many StravaAccount entities in bulk.
type StravaAccountCreateBulk struct {
	config
	err      error
	builders []*StravaAccountCreate
}

// Save creates the StravaAccount entities in the database.
func (sacb *StravaAccountCreateBulk) Save(ctx context.Context) ([]*StravaAccount, error) {
	if sacb.err != nil {
		return nil, sacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*StravaAccount, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StravaAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *StravaAccountCreateBulk) SaveX(ctx context.Context) []*StravaAccount {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *StravaAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *StravaAccountCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
