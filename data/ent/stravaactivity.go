// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/cdcauthusers"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/stravaactivity"
)

// StravaActivity is the model entity for the StravaActivity schema.
type StravaActivity struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// StravaAccountID holds the value of the "strava_account_id" field.
	StravaAccountID int64 `json:"strava_account_id,omitempty"`
	// AthleteID holds the value of the "athlete_id" field.
	AthleteID int64 `json:"athlete_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// ActivityName holds the value of the "activity_name" field.
	ActivityName string `json:"activity_name,omitempty"`
	// ActivityType holds the value of the "activity_type" field.
	ActivityType int `json:"activity_type,omitempty"`
	// ActivityURL holds the value of the "activity_url" field.
	ActivityURL string `json:"activity_url,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// Distance holds the value of the "distance" field.
	Distance float64 `json:"distance,omitempty"`
	// MovingTime holds the value of the "moving_time" field.
	MovingTime int32 `json:"moving_time,omitempty"`
	// ElapsedTime holds the value of the "elapsed_time" field.
	ElapsedTime int32 `json:"elapsed_time,omitempty"`
	// TotalElevationGain holds the value of the "total_elevation_gain" field.
	TotalElevationGain int32 `json:"total_elevation_gain,omitempty"`
	// AverageSpeed holds the value of the "average_speed" field.
	AverageSpeed float64 `json:"average_speed,omitempty"`
	// MaxSpeed holds the value of the "max_speed" field.
	MaxSpeed float64 `json:"max_speed,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StravaActivityQuery when eager-loading is set.
	Edges        StravaActivityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StravaActivityEdges holds the relations/edges for other nodes in the graph.
type StravaActivityEdges struct {
	// CdcAuthUsers holds the value of the cdc_auth_users edge.
	CdcAuthUsers *CdcAuthUsers `json:"cdc_auth_users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CdcAuthUsersOrErr returns the CdcAuthUsers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StravaActivityEdges) CdcAuthUsersOrErr() (*CdcAuthUsers, error) {
	if e.CdcAuthUsers != nil {
		return e.CdcAuthUsers, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: cdcauthusers.Label}
	}
	return nil, &NotLoadedError{edge: "cdc_auth_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StravaActivity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stravaactivity.FieldDistance, stravaactivity.FieldAverageSpeed, stravaactivity.FieldMaxSpeed:
			values[i] = new(sql.NullFloat64)
		case stravaactivity.FieldStravaAccountID, stravaactivity.FieldAthleteID, stravaactivity.FieldActivityType, stravaactivity.FieldMovingTime, stravaactivity.FieldElapsedTime, stravaactivity.FieldTotalElevationGain:
			values[i] = new(sql.NullInt64)
		case stravaactivity.FieldActivityName, stravaactivity.FieldActivityURL:
			values[i] = new(sql.NullString)
		case stravaactivity.FieldStartDate, stravaactivity.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case stravaactivity.FieldID, stravaactivity.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StravaActivity fields.
func (sa *StravaActivity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stravaactivity.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sa.ID = *value
			}
		case stravaactivity.FieldStravaAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field strava_account_id", values[i])
			} else if value.Valid {
				sa.StravaAccountID = value.Int64
			}
		case stravaactivity.FieldAthleteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field athlete_id", values[i])
			} else if value.Valid {
				sa.AthleteID = value.Int64
			}
		case stravaactivity.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				sa.UserID = *value
			}
		case stravaactivity.FieldActivityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_name", values[i])
			} else if value.Valid {
				sa.ActivityName = value.String
			}
		case stravaactivity.FieldActivityType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activity_type", values[i])
			} else if value.Valid {
				sa.ActivityType = int(value.Int64)
			}
		case stravaactivity.FieldActivityURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_url", values[i])
			} else if value.Valid {
				sa.ActivityURL = value.String
			}
		case stravaactivity.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				sa.StartDate = value.Time
			}
		case stravaactivity.FieldDistance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field distance", values[i])
			} else if value.Valid {
				sa.Distance = value.Float64
			}
		case stravaactivity.FieldMovingTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field moving_time", values[i])
			} else if value.Valid {
				sa.MovingTime = int32(value.Int64)
			}
		case stravaactivity.FieldElapsedTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field elapsed_time", values[i])
			} else if value.Valid {
				sa.ElapsedTime = int32(value.Int64)
			}
		case stravaactivity.FieldTotalElevationGain:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_elevation_gain", values[i])
			} else if value.Valid {
				sa.TotalElevationGain = int32(value.Int64)
			}
		case stravaactivity.FieldAverageSpeed:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field average_speed", values[i])
			} else if value.Valid {
				sa.AverageSpeed = value.Float64
			}
		case stravaactivity.FieldMaxSpeed:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field max_speed", values[i])
			} else if value.Valid {
				sa.MaxSpeed = value.Float64
			}
		case stravaactivity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sa.CreatedAt = value.Time
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StravaActivity.
// This includes values selected through modifiers, order, etc.
func (sa *StravaActivity) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// QueryCdcAuthUsers queries the "cdc_auth_users" edge of the StravaActivity entity.
func (sa *StravaActivity) QueryCdcAuthUsers() *CdcAuthUsersQuery {
	return NewStravaActivityClient(sa.config).QueryCdcAuthUsers(sa)
}

// Update returns a builder for updating this StravaActivity.
// Note that you need to call StravaActivity.Unwrap() before calling this method if this StravaActivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *StravaActivity) Update() *StravaActivityUpdateOne {
	return NewStravaActivityClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the StravaActivity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *StravaActivity) Unwrap() *StravaActivity {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: StravaActivity is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *StravaActivity) String() string {
	var builder strings.Builder
	builder.WriteString("StravaActivity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("strava_account_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.StravaAccountID))
	builder.WriteString(", ")
	builder.WriteString("athlete_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.AthleteID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.UserID))
	builder.WriteString(", ")
	builder.WriteString("activity_name=")
	builder.WriteString(sa.ActivityName)
	builder.WriteString(", ")
	builder.WriteString("activity_type=")
	builder.WriteString(fmt.Sprintf("%v", sa.ActivityType))
	builder.WriteString(", ")
	builder.WriteString("activity_url=")
	builder.WriteString(sa.ActivityURL)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(sa.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("distance=")
	builder.WriteString(fmt.Sprintf("%v", sa.Distance))
	builder.WriteString(", ")
	builder.WriteString("moving_time=")
	builder.WriteString(fmt.Sprintf("%v", sa.MovingTime))
	builder.WriteString(", ")
	builder.WriteString("elapsed_time=")
	builder.WriteString(fmt.Sprintf("%v", sa.ElapsedTime))
	builder.WriteString(", ")
	builder.WriteString("total_elevation_gain=")
	builder.WriteString(fmt.Sprintf("%v", sa.TotalElevationGain))
	builder.WriteString(", ")
	builder.WriteString("average_speed=")
	builder.WriteString(fmt.Sprintf("%v", sa.AverageSpeed))
	builder.WriteString(", ")
	builder.WriteString("max_speed=")
	builder.WriteString(fmt.Sprintf("%v", sa.MaxSpeed))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sa.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StravaActivities is a parsable slice of StravaActivity.
type StravaActivities []*StravaActivity
