// Code generated by ent, DO NOT EDIT.

package stravaactivity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the stravaactivity type in the database.
	Label = "strava_activity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStravaAccountID holds the string denoting the strava_account_id field in the database.
	FieldStravaAccountID = "strava_account_id"
	// FieldAthleteID holds the string denoting the athlete_id field in the database.
	FieldAthleteID = "athlete_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldActivityName holds the string denoting the activity_name field in the database.
	FieldActivityName = "activity_name"
	// FieldActivityType holds the string denoting the activity_type field in the database.
	FieldActivityType = "activity_type"
	// FieldActivityURL holds the string denoting the activity_url field in the database.
	FieldActivityURL = "activity_url"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldDistance holds the string denoting the distance field in the database.
	FieldDistance = "distance"
	// FieldMovingTime holds the string denoting the moving_time field in the database.
	FieldMovingTime = "moving_time"
	// FieldElapsedTime holds the string denoting the elapsed_time field in the database.
	FieldElapsedTime = "elapsed_time"
	// FieldTotalElevationGain holds the string denoting the total_elevation_gain field in the database.
	FieldTotalElevationGain = "total_elevation_gain"
	// FieldAverageSpeed holds the string denoting the average_speed field in the database.
	FieldAverageSpeed = "average_speed"
	// FieldMaxSpeed holds the string denoting the max_speed field in the database.
	FieldMaxSpeed = "max_speed"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeCdcAuthUsers holds the string denoting the cdc_auth_users edge name in mutations.
	EdgeCdcAuthUsers = "cdc_auth_users"
	// Table holds the table name of the stravaactivity in the database.
	Table = "strava_activity"
	// CdcAuthUsersTable is the table that holds the cdc_auth_users relation/edge.
	CdcAuthUsersTable = "strava_activity"
	// CdcAuthUsersInverseTable is the table name for the CdcAuthUsers entity.
	// It exists in this package in order to avoid circular dependency with the "cdcauthusers" package.
	CdcAuthUsersInverseTable = "cdc_auth_users"
	// CdcAuthUsersColumn is the table column denoting the cdc_auth_users relation/edge.
	CdcAuthUsersColumn = "user_id"
)

// Columns holds all SQL columns for stravaactivity fields.
var Columns = []string{
	FieldID,
	FieldStravaAccountID,
	FieldAthleteID,
	FieldUserID,
	FieldActivityName,
	FieldActivityType,
	FieldActivityURL,
	FieldStartDate,
	FieldDistance,
	FieldMovingTime,
	FieldElapsedTime,
	FieldTotalElevationGain,
	FieldAverageSpeed,
	FieldMaxSpeed,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ActivityNameValidator is a validator for the "activity_name" field. It is called by the builders before save.
	ActivityNameValidator func(string) error
	// DefaultActivityType holds the default value on creation for the "activity_type" field.
	DefaultActivityType int
	// ActivityURLValidator is a validator for the "activity_url" field. It is called by the builders before save.
	ActivityURLValidator func(string) error
	// DefaultDistance holds the default value on creation for the "distance" field.
	DefaultDistance float64
	// DefaultMovingTime holds the default value on creation for the "moving_time" field.
	DefaultMovingTime int32
	// DefaultElapsedTime holds the default value on creation for the "elapsed_time" field.
	DefaultElapsedTime int32
	// DefaultTotalElevationGain holds the default value on creation for the "total_elevation_gain" field.
	DefaultTotalElevationGain int32
	// DefaultAverageSpeed holds the default value on creation for the "average_speed" field.
	DefaultAverageSpeed float64
	// DefaultMaxSpeed holds the default value on creation for the "max_speed" field.
	DefaultMaxSpeed float64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the StravaActivity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStravaAccountID orders the results by the strava_account_id field.
func ByStravaAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStravaAccountID, opts...).ToFunc()
}

// ByAthleteID orders the results by the athlete_id field.
func ByAthleteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAthleteID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByActivityName orders the results by the activity_name field.
func ByActivityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityName, opts...).ToFunc()
}

// ByActivityType orders the results by the activity_type field.
func ByActivityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityType, opts...).ToFunc()
}

// ByActivityURL orders the results by the activity_url field.
func ByActivityURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityURL, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByDistance orders the results by the distance field.
func ByDistance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistance, opts...).ToFunc()
}

// ByMovingTime orders the results by the moving_time field.
func ByMovingTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMovingTime, opts...).ToFunc()
}

// ByElapsedTime orders the results by the elapsed_time field.
func ByElapsedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElapsedTime, opts...).ToFunc()
}

// ByTotalElevationGain orders the results by the total_elevation_gain field.
func ByTotalElevationGain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalElevationGain, opts...).ToFunc()
}

// ByAverageSpeed orders the results by the average_speed field.
func ByAverageSpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverageSpeed, opts...).ToFunc()
}

// ByMaxSpeed orders the results by the max_speed field.
func ByMaxSpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxSpeed, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCdcAuthUsersField orders the results by cdc_auth_users field.
func ByCdcAuthUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCdcAuthUsersStep(), sql.OrderByField(field, opts...))
	}
}
func newCdcAuthUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CdcAuthUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CdcAuthUsersTable, CdcAuthUsersColumn),
	)
}
