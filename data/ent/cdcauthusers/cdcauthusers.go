// Code generated by ent, DO NOT EDIT.

package cdcauthusers

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cdcauthusers type in the database.
	Label = "cdc_auth_users"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// EdgeStravaAccounts holds the string denoting the strava_accounts edge name in mutations.
	EdgeStravaAccounts = "strava_accounts"
	// EdgeStravaActivities holds the string denoting the strava_activities edge name in mutations.
	EdgeStravaActivities = "strava_activities"
	// Table holds the table name of the cdcauthusers in the database.
	Table = "cdc_auth_users"
	// StravaAccountsTable is the table that holds the strava_accounts relation/edge.
	StravaAccountsTable = "strava_account"
	// StravaAccountsInverseTable is the table name for the StravaAccount entity.
	// It exists in this package in order to avoid circular dependency with the "stravaaccount" package.
	StravaAccountsInverseTable = "strava_account"
	// StravaAccountsColumn is the table column denoting the strava_accounts relation/edge.
	StravaAccountsColumn = "user_id"
	// StravaActivitiesTable is the table that holds the strava_activities relation/edge.
	StravaActivitiesTable = "strava_activity"
	// StravaActivitiesInverseTable is the table name for the StravaActivity entity.
	// It exists in this package in order to avoid circular dependency with the "stravaactivity" package.
	StravaActivitiesInverseTable = "strava_activity"
	// StravaActivitiesColumn is the table column denoting the strava_activities relation/edge.
	StravaActivitiesColumn = "user_id"
)

// Columns holds all SQL columns for cdcauthusers fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldEmail,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
)

// OrderOption defines the ordering options for the CdcAuthUsers queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByStravaAccountsCount orders the results by strava_accounts count.
func ByStravaAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStravaAccountsStep(), opts...)
	}
}

// ByStravaAccounts orders the results by strava_accounts terms.
func ByStravaAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStravaAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStravaActivitiesCount orders the results by strava_activities count.
func ByStravaActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStravaActivitiesStep(), opts...)
	}
}

// ByStravaActivities orders the results by strava_activities terms.
func ByStravaActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStravaActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStravaAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StravaAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StravaAccountsTable, StravaAccountsColumn),
	)
}
func newStravaActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StravaActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StravaActivitiesTable, StravaActivitiesColumn),
	)
}
