// Code generated by ent, DO NOT EDIT.

package stravaaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldUserID, v))
}

// AthleteID applies equality check predicate on the "athlete_id" field. It's identical to AthleteIDEQ.
func AthleteID(v int64) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldAthleteID, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldRefreshToken, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldExpiresAt, v))
}

// Profile applies equality check predicate on the "profile" field. It's identical to ProfileEQ.
func Profile(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldProfile, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldUsername, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldLastName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldUserID, v))
}

// AthleteIDEQ applies the EQ predicate on the "athlete_id" field.
func AthleteIDEQ(v int64) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldAthleteID, v))
}

// AthleteIDNEQ applies the NEQ predicate on the "athlete_id" field.
func AthleteIDNEQ(v int64) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldAthleteID, v))
}

// AthleteIDIn applies the In predicate on the "athlete_id" field.
func AthleteIDIn(vs ...int64) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldAthleteID, vs...))
}

// AthleteIDNotIn applies the NotIn predicate on the "athlete_id" field.
func AthleteIDNotIn(vs ...int64) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldAthleteID, vs...))
}

// AthleteIDGT applies the GT predicate on the "athlete_id" field.
func AthleteIDGT(v int64) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldAthleteID, v))
}

// AthleteIDGTE applies the GTE predicate on the "athlete_id" field.
func AthleteIDGTE(v int64) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldAthleteID, v))
}

// AthleteIDLT applies the LT predicate on the "athlete_id" field.
func AthleteIDLT(v int64) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldAthleteID, v))
}

// AthleteIDLTE applies the LTE predicate on the "athlete_id" field.
func AthleteIDLTE(v int64) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldAthleteID, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContainsFold(FieldRefreshToken, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldExpiresAt, v))
}

// ProfileEQ applies the EQ predicate on the "profile" field.
func ProfileEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldProfile, v))
}

// ProfileNEQ applies the NEQ predicate on the "profile" field.
func ProfileNEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldProfile, v))
}

// ProfileIn applies the In predicate on the "profile" field.
func ProfileIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldProfile, vs...))
}

// ProfileNotIn applies the NotIn predicate on the "profile" field.
func ProfileNotIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldProfile, vs...))
}

// ProfileGT applies the GT predicate on the "profile" field.
func ProfileGT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldProfile, v))
}

// ProfileGTE applies the GTE predicate on the "profile" field.
func ProfileGTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldProfile, v))
}

// ProfileLT applies the LT predicate on the "profile" field.
func ProfileLT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldProfile, v))
}

// ProfileLTE applies the LTE predicate on the "profile" field.
func ProfileLTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldProfile, v))
}

// ProfileContains applies the Contains predicate on the "profile" field.
func ProfileContains(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContains(FieldProfile, v))
}

// ProfileHasPrefix applies the HasPrefix predicate on the "profile" field.
func ProfileHasPrefix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasPrefix(FieldProfile, v))
}

// ProfileHasSuffix applies the HasSuffix predicate on the "profile" field.
func ProfileHasSuffix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasSuffix(FieldProfile, v))
}

// ProfileEqualFold applies the EqualFold predicate on the "profile" field.
func ProfileEqualFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEqualFold(FieldProfile, v))
}

// ProfileContainsFold applies the ContainsFold predicate on the "profile" field.
func ProfileContainsFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContainsFold(FieldProfile, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContainsFold(FieldUsername, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldContainsFold(FieldLastName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.StravaAccount {
	return predicate.StravaAccount(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCdcAuthUsers applies the HasEdge predicate on the "cdc_auth_users" edge.
func HasCdcAuthUsers() predicate.StravaAccount {
	return predicate.StravaAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CdcAuthUsersTable, CdcAuthUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCdcAuthUsersWith applies the HasEdge predicate on the "cdc_auth_users" edge with a given conditions (other predicates).
func HasCdcAuthUsersWith(preds ...predicate.CdcAuthUsers) predicate.StravaAccount {
	return predicate.StravaAccount(func(s *sql.Selector) {
		step := newCdcAuthUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StravaAccount) predicate.StravaAccount {
	return predicate.StravaAccount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StravaAccount) predicate.StravaAccount {
	return predicate.StravaAccount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StravaAccount) predicate.StravaAccount {
	return predicate.StravaAccount(sql.NotPredicates(p))
}
