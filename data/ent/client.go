// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/cdcauthusers"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/stravaaccount"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CdcAuthUsers is the client for interacting with the CdcAuthUsers builders.
	CdcAuthUsers *CdcAuthUsersClient
	// StravaAccount is the client for interacting with the StravaAccount builders.
	StravaAccount *StravaAccountClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CdcAuthUsers = NewCdcAuthUsersClient(c.config)
	c.StravaAccount = NewStravaAccountClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		CdcAuthUsers:  NewCdcAuthUsersClient(cfg),
		StravaAccount: NewStravaAccountClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		CdcAuthUsers:  NewCdcAuthUsersClient(cfg),
		StravaAccount: NewStravaAccountClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CdcAuthUsers.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CdcAuthUsers.Use(hooks...)
	c.StravaAccount.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.CdcAuthUsers.Intercept(interceptors...)
	c.StravaAccount.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CdcAuthUsersMutation:
		return c.CdcAuthUsers.mutate(ctx, m)
	case *StravaAccountMutation:
		return c.StravaAccount.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CdcAuthUsersClient is a client for the CdcAuthUsers schema.
type CdcAuthUsersClient struct {
	config
}

// NewCdcAuthUsersClient returns a client for the CdcAuthUsers from the given config.
func NewCdcAuthUsersClient(c config) *CdcAuthUsersClient {
	return &CdcAuthUsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cdcauthusers.Hooks(f(g(h())))`.
func (c *CdcAuthUsersClient) Use(hooks ...Hook) {
	c.hooks.CdcAuthUsers = append(c.hooks.CdcAuthUsers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cdcauthusers.Intercept(f(g(h())))`.
func (c *CdcAuthUsersClient) Intercept(interceptors ...Interceptor) {
	c.inters.CdcAuthUsers = append(c.inters.CdcAuthUsers, interceptors...)
}

// Create returns a builder for creating a CdcAuthUsers entity.
func (c *CdcAuthUsersClient) Create() *CdcAuthUsersCreate {
	mutation := newCdcAuthUsersMutation(c.config, OpCreate)
	return &CdcAuthUsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CdcAuthUsers entities.
func (c *CdcAuthUsersClient) CreateBulk(builders ...*CdcAuthUsersCreate) *CdcAuthUsersCreateBulk {
	return &CdcAuthUsersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CdcAuthUsersClient) MapCreateBulk(slice any, setFunc func(*CdcAuthUsersCreate, int)) *CdcAuthUsersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CdcAuthUsersCreateBulk{err: fmt.Errorf("calling to CdcAuthUsersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CdcAuthUsersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CdcAuthUsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CdcAuthUsers.
func (c *CdcAuthUsersClient) Update() *CdcAuthUsersUpdate {
	mutation := newCdcAuthUsersMutation(c.config, OpUpdate)
	return &CdcAuthUsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CdcAuthUsersClient) UpdateOne(cau *CdcAuthUsers) *CdcAuthUsersUpdateOne {
	mutation := newCdcAuthUsersMutation(c.config, OpUpdateOne, withCdcAuthUsers(cau))
	return &CdcAuthUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CdcAuthUsersClient) UpdateOneID(id uuid.UUID) *CdcAuthUsersUpdateOne {
	mutation := newCdcAuthUsersMutation(c.config, OpUpdateOne, withCdcAuthUsersID(id))
	return &CdcAuthUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CdcAuthUsers.
func (c *CdcAuthUsersClient) Delete() *CdcAuthUsersDelete {
	mutation := newCdcAuthUsersMutation(c.config, OpDelete)
	return &CdcAuthUsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CdcAuthUsersClient) DeleteOne(cau *CdcAuthUsers) *CdcAuthUsersDeleteOne {
	return c.DeleteOneID(cau.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CdcAuthUsersClient) DeleteOneID(id uuid.UUID) *CdcAuthUsersDeleteOne {
	builder := c.Delete().Where(cdcauthusers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CdcAuthUsersDeleteOne{builder}
}

// Query returns a query builder for CdcAuthUsers.
func (c *CdcAuthUsersClient) Query() *CdcAuthUsersQuery {
	return &CdcAuthUsersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCdcAuthUsers},
		inters: c.Interceptors(),
	}
}

// Get returns a CdcAuthUsers entity by its id.
func (c *CdcAuthUsersClient) Get(ctx context.Context, id uuid.UUID) (*CdcAuthUsers, error) {
	return c.Query().Where(cdcauthusers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CdcAuthUsersClient) GetX(ctx context.Context, id uuid.UUID) *CdcAuthUsers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStravaAccounts queries the strava_accounts edge of a CdcAuthUsers.
func (c *CdcAuthUsersClient) QueryStravaAccounts(cau *CdcAuthUsers) *StravaAccountQuery {
	query := (&StravaAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cau.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cdcauthusers.Table, cdcauthusers.FieldID, id),
			sqlgraph.To(stravaaccount.Table, stravaaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cdcauthusers.StravaAccountsTable, cdcauthusers.StravaAccountsColumn),
		)
		fromV = sqlgraph.Neighbors(cau.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CdcAuthUsersClient) Hooks() []Hook {
	return c.hooks.CdcAuthUsers
}

// Interceptors returns the client interceptors.
func (c *CdcAuthUsersClient) Interceptors() []Interceptor {
	return c.inters.CdcAuthUsers
}

func (c *CdcAuthUsersClient) mutate(ctx context.Context, m *CdcAuthUsersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CdcAuthUsersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CdcAuthUsersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CdcAuthUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CdcAuthUsersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CdcAuthUsers mutation op: %q", m.Op())
	}
}

// StravaAccountClient is a client for the StravaAccount schema.
type StravaAccountClient struct {
	config
}

// NewStravaAccountClient returns a client for the StravaAccount from the given config.
func NewStravaAccountClient(c config) *StravaAccountClient {
	return &StravaAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stravaaccount.Hooks(f(g(h())))`.
func (c *StravaAccountClient) Use(hooks ...Hook) {
	c.hooks.StravaAccount = append(c.hooks.StravaAccount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stravaaccount.Intercept(f(g(h())))`.
func (c *StravaAccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.StravaAccount = append(c.inters.StravaAccount, interceptors...)
}

// Create returns a builder for creating a StravaAccount entity.
func (c *StravaAccountClient) Create() *StravaAccountCreate {
	mutation := newStravaAccountMutation(c.config, OpCreate)
	return &StravaAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StravaAccount entities.
func (c *StravaAccountClient) CreateBulk(builders ...*StravaAccountCreate) *StravaAccountCreateBulk {
	return &StravaAccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StravaAccountClient) MapCreateBulk(slice any, setFunc func(*StravaAccountCreate, int)) *StravaAccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StravaAccountCreateBulk{err: fmt.Errorf("calling to StravaAccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StravaAccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StravaAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StravaAccount.
func (c *StravaAccountClient) Update() *StravaAccountUpdate {
	mutation := newStravaAccountMutation(c.config, OpUpdate)
	return &StravaAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StravaAccountClient) UpdateOne(sa *StravaAccount) *StravaAccountUpdateOne {
	mutation := newStravaAccountMutation(c.config, OpUpdateOne, withStravaAccount(sa))
	return &StravaAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StravaAccountClient) UpdateOneID(id uuid.UUID) *StravaAccountUpdateOne {
	mutation := newStravaAccountMutation(c.config, OpUpdateOne, withStravaAccountID(id))
	return &StravaAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StravaAccount.
func (c *StravaAccountClient) Delete() *StravaAccountDelete {
	mutation := newStravaAccountMutation(c.config, OpDelete)
	return &StravaAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StravaAccountClient) DeleteOne(sa *StravaAccount) *StravaAccountDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StravaAccountClient) DeleteOneID(id uuid.UUID) *StravaAccountDeleteOne {
	builder := c.Delete().Where(stravaaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StravaAccountDeleteOne{builder}
}

// Query returns a query builder for StravaAccount.
func (c *StravaAccountClient) Query() *StravaAccountQuery {
	return &StravaAccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStravaAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a StravaAccount entity by its id.
func (c *StravaAccountClient) Get(ctx context.Context, id uuid.UUID) (*StravaAccount, error) {
	return c.Query().Where(stravaaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StravaAccountClient) GetX(ctx context.Context, id uuid.UUID) *StravaAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCdcAuthUsers queries the cdc_auth_users edge of a StravaAccount.
func (c *StravaAccountClient) QueryCdcAuthUsers(sa *StravaAccount) *CdcAuthUsersQuery {
	query := (&CdcAuthUsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stravaaccount.Table, stravaaccount.FieldID, id),
			sqlgraph.To(cdcauthusers.Table, cdcauthusers.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stravaaccount.CdcAuthUsersTable, stravaaccount.CdcAuthUsersColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StravaAccountClient) Hooks() []Hook {
	return c.hooks.StravaAccount
}

// Interceptors returns the client interceptors.
func (c *StravaAccountClient) Interceptors() []Interceptor {
	return c.inters.StravaAccount
}

func (c *StravaAccountClient) mutate(ctx context.Context, m *StravaAccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StravaAccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StravaAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StravaAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StravaAccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StravaAccount mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CdcAuthUsers, StravaAccount []ent.Hook
	}
	inters struct {
		CdcAuthUsers, StravaAccount []ent.Interceptor
	}
)
