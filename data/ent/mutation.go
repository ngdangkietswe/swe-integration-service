// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/cdcauthusers"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/predicate"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/stravaaccount"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/stravaactivity"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCdcAuthUsers   = "CdcAuthUsers"
	TypeStravaAccount  = "StravaAccount"
	TypeStravaActivity = "StravaActivity"
)

// CdcAuthUsersMutation represents an operation that mutates the CdcAuthUsers nodes in the graph.
type CdcAuthUsersMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	username                 *string
	email                    *string
	clearedFields            map[string]struct{}
	strava_accounts          map[uuid.UUID]struct{}
	removedstrava_accounts   map[uuid.UUID]struct{}
	clearedstrava_accounts   bool
	strava_activities        map[uuid.UUID]struct{}
	removedstrava_activities map[uuid.UUID]struct{}
	clearedstrava_activities bool
	done                     bool
	oldValue                 func(context.Context) (*CdcAuthUsers, error)
	predicates               []predicate.CdcAuthUsers
}

var _ ent.Mutation = (*CdcAuthUsersMutation)(nil)

// cdcauthusersOption allows management of the mutation configuration using functional options.
type cdcauthusersOption func(*CdcAuthUsersMutation)

// newCdcAuthUsersMutation creates new mutation for the CdcAuthUsers entity.
func newCdcAuthUsersMutation(c config, op Op, opts ...cdcauthusersOption) *CdcAuthUsersMutation {
	m := &CdcAuthUsersMutation{
		config:        c,
		op:            op,
		typ:           TypeCdcAuthUsers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCdcAuthUsersID sets the ID field of the mutation.
func withCdcAuthUsersID(id uuid.UUID) cdcauthusersOption {
	return func(m *CdcAuthUsersMutation) {
		var (
			err   error
			once  sync.Once
			value *CdcAuthUsers
		)
		m.oldValue = func(ctx context.Context) (*CdcAuthUsers, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CdcAuthUsers.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCdcAuthUsers sets the old CdcAuthUsers of the mutation.
func withCdcAuthUsers(node *CdcAuthUsers) cdcauthusersOption {
	return func(m *CdcAuthUsersMutation) {
		m.oldValue = func(context.Context) (*CdcAuthUsers, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CdcAuthUsersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CdcAuthUsersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CdcAuthUsers entities.
func (m *CdcAuthUsersMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CdcAuthUsersMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CdcAuthUsersMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CdcAuthUsers.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *CdcAuthUsersMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *CdcAuthUsersMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the CdcAuthUsers entity.
// If the CdcAuthUsers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CdcAuthUsersMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *CdcAuthUsersMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *CdcAuthUsersMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *CdcAuthUsersMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the CdcAuthUsers entity.
// If the CdcAuthUsers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CdcAuthUsersMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *CdcAuthUsersMutation) ResetEmail() {
	m.email = nil
}

// AddStravaAccountIDs adds the "strava_accounts" edge to the StravaAccount entity by ids.
func (m *CdcAuthUsersMutation) AddStravaAccountIDs(ids ...uuid.UUID) {
	if m.strava_accounts == nil {
		m.strava_accounts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.strava_accounts[ids[i]] = struct{}{}
	}
}

// ClearStravaAccounts clears the "strava_accounts" edge to the StravaAccount entity.
func (m *CdcAuthUsersMutation) ClearStravaAccounts() {
	m.clearedstrava_accounts = true
}

// StravaAccountsCleared reports if the "strava_accounts" edge to the StravaAccount entity was cleared.
func (m *CdcAuthUsersMutation) StravaAccountsCleared() bool {
	return m.clearedstrava_accounts
}

// RemoveStravaAccountIDs removes the "strava_accounts" edge to the StravaAccount entity by IDs.
func (m *CdcAuthUsersMutation) RemoveStravaAccountIDs(ids ...uuid.UUID) {
	if m.removedstrava_accounts == nil {
		m.removedstrava_accounts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.strava_accounts, ids[i])
		m.removedstrava_accounts[ids[i]] = struct{}{}
	}
}

// RemovedStravaAccounts returns the removed IDs of the "strava_accounts" edge to the StravaAccount entity.
func (m *CdcAuthUsersMutation) RemovedStravaAccountsIDs() (ids []uuid.UUID) {
	for id := range m.removedstrava_accounts {
		ids = append(ids, id)
	}
	return
}

// StravaAccountsIDs returns the "strava_accounts" edge IDs in the mutation.
func (m *CdcAuthUsersMutation) StravaAccountsIDs() (ids []uuid.UUID) {
	for id := range m.strava_accounts {
		ids = append(ids, id)
	}
	return
}

// ResetStravaAccounts resets all changes to the "strava_accounts" edge.
func (m *CdcAuthUsersMutation) ResetStravaAccounts() {
	m.strava_accounts = nil
	m.clearedstrava_accounts = false
	m.removedstrava_accounts = nil
}

// AddStravaActivityIDs adds the "strava_activities" edge to the StravaActivity entity by ids.
func (m *CdcAuthUsersMutation) AddStravaActivityIDs(ids ...uuid.UUID) {
	if m.strava_activities == nil {
		m.strava_activities = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.strava_activities[ids[i]] = struct{}{}
	}
}

// ClearStravaActivities clears the "strava_activities" edge to the StravaActivity entity.
func (m *CdcAuthUsersMutation) ClearStravaActivities() {
	m.clearedstrava_activities = true
}

// StravaActivitiesCleared reports if the "strava_activities" edge to the StravaActivity entity was cleared.
func (m *CdcAuthUsersMutation) StravaActivitiesCleared() bool {
	return m.clearedstrava_activities
}

// RemoveStravaActivityIDs removes the "strava_activities" edge to the StravaActivity entity by IDs.
func (m *CdcAuthUsersMutation) RemoveStravaActivityIDs(ids ...uuid.UUID) {
	if m.removedstrava_activities == nil {
		m.removedstrava_activities = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.strava_activities, ids[i])
		m.removedstrava_activities[ids[i]] = struct{}{}
	}
}

// RemovedStravaActivities returns the removed IDs of the "strava_activities" edge to the StravaActivity entity.
func (m *CdcAuthUsersMutation) RemovedStravaActivitiesIDs() (ids []uuid.UUID) {
	for id := range m.removedstrava_activities {
		ids = append(ids, id)
	}
	return
}

// StravaActivitiesIDs returns the "strava_activities" edge IDs in the mutation.
func (m *CdcAuthUsersMutation) StravaActivitiesIDs() (ids []uuid.UUID) {
	for id := range m.strava_activities {
		ids = append(ids, id)
	}
	return
}

// ResetStravaActivities resets all changes to the "strava_activities" edge.
func (m *CdcAuthUsersMutation) ResetStravaActivities() {
	m.strava_activities = nil
	m.clearedstrava_activities = false
	m.removedstrava_activities = nil
}

// Where appends a list predicates to the CdcAuthUsersMutation builder.
func (m *CdcAuthUsersMutation) Where(ps ...predicate.CdcAuthUsers) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CdcAuthUsersMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CdcAuthUsersMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CdcAuthUsers, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CdcAuthUsersMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CdcAuthUsersMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CdcAuthUsers).
func (m *CdcAuthUsersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CdcAuthUsersMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.username != nil {
		fields = append(fields, cdcauthusers.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, cdcauthusers.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CdcAuthUsersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cdcauthusers.FieldUsername:
		return m.Username()
	case cdcauthusers.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CdcAuthUsersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cdcauthusers.FieldUsername:
		return m.OldUsername(ctx)
	case cdcauthusers.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown CdcAuthUsers field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CdcAuthUsersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cdcauthusers.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case cdcauthusers.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown CdcAuthUsers field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CdcAuthUsersMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CdcAuthUsersMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CdcAuthUsersMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CdcAuthUsers numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CdcAuthUsersMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CdcAuthUsersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CdcAuthUsersMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CdcAuthUsers nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CdcAuthUsersMutation) ResetField(name string) error {
	switch name {
	case cdcauthusers.FieldUsername:
		m.ResetUsername()
		return nil
	case cdcauthusers.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown CdcAuthUsers field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CdcAuthUsersMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.strava_accounts != nil {
		edges = append(edges, cdcauthusers.EdgeStravaAccounts)
	}
	if m.strava_activities != nil {
		edges = append(edges, cdcauthusers.EdgeStravaActivities)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CdcAuthUsersMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cdcauthusers.EdgeStravaAccounts:
		ids := make([]ent.Value, 0, len(m.strava_accounts))
		for id := range m.strava_accounts {
			ids = append(ids, id)
		}
		return ids
	case cdcauthusers.EdgeStravaActivities:
		ids := make([]ent.Value, 0, len(m.strava_activities))
		for id := range m.strava_activities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CdcAuthUsersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedstrava_accounts != nil {
		edges = append(edges, cdcauthusers.EdgeStravaAccounts)
	}
	if m.removedstrava_activities != nil {
		edges = append(edges, cdcauthusers.EdgeStravaActivities)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CdcAuthUsersMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case cdcauthusers.EdgeStravaAccounts:
		ids := make([]ent.Value, 0, len(m.removedstrava_accounts))
		for id := range m.removedstrava_accounts {
			ids = append(ids, id)
		}
		return ids
	case cdcauthusers.EdgeStravaActivities:
		ids := make([]ent.Value, 0, len(m.removedstrava_activities))
		for id := range m.removedstrava_activities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CdcAuthUsersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstrava_accounts {
		edges = append(edges, cdcauthusers.EdgeStravaAccounts)
	}
	if m.clearedstrava_activities {
		edges = append(edges, cdcauthusers.EdgeStravaActivities)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CdcAuthUsersMutation) EdgeCleared(name string) bool {
	switch name {
	case cdcauthusers.EdgeStravaAccounts:
		return m.clearedstrava_accounts
	case cdcauthusers.EdgeStravaActivities:
		return m.clearedstrava_activities
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CdcAuthUsersMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CdcAuthUsers unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CdcAuthUsersMutation) ResetEdge(name string) error {
	switch name {
	case cdcauthusers.EdgeStravaAccounts:
		m.ResetStravaAccounts()
		return nil
	case cdcauthusers.EdgeStravaActivities:
		m.ResetStravaActivities()
		return nil
	}
	return fmt.Errorf("unknown CdcAuthUsers edge %s", name)
}

// StravaAccountMutation represents an operation that mutates the StravaAccount nodes in the graph.
type StravaAccountMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	athlete_id            *int64
	addathlete_id         *int64
	access_token          *string
	refresh_token         *string
	expires_at            *time.Time
	profile               *string
	username              *string
	first_name            *string
	last_name             *string
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	cdc_auth_users        *uuid.UUID
	clearedcdc_auth_users bool
	done                  bool
	oldValue              func(context.Context) (*StravaAccount, error)
	predicates            []predicate.StravaAccount
}

var _ ent.Mutation = (*StravaAccountMutation)(nil)

// stravaaccountOption allows management of the mutation configuration using functional options.
type stravaaccountOption func(*StravaAccountMutation)

// newStravaAccountMutation creates new mutation for the StravaAccount entity.
func newStravaAccountMutation(c config, op Op, opts ...stravaaccountOption) *StravaAccountMutation {
	m := &StravaAccountMutation{
		config:        c,
		op:            op,
		typ:           TypeStravaAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStravaAccountID sets the ID field of the mutation.
func withStravaAccountID(id uuid.UUID) stravaaccountOption {
	return func(m *StravaAccountMutation) {
		var (
			err   error
			once  sync.Once
			value *StravaAccount
		)
		m.oldValue = func(ctx context.Context) (*StravaAccount, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StravaAccount.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStravaAccount sets the old StravaAccount of the mutation.
func withStravaAccount(node *StravaAccount) stravaaccountOption {
	return func(m *StravaAccountMutation) {
		m.oldValue = func(context.Context) (*StravaAccount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StravaAccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StravaAccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StravaAccount entities.
func (m *StravaAccountMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StravaAccountMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StravaAccountMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StravaAccount.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *StravaAccountMutation) SetUserID(u uuid.UUID) {
	m.cdc_auth_users = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *StravaAccountMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.cdc_auth_users
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *StravaAccountMutation) ResetUserID() {
	m.cdc_auth_users = nil
}

// SetAthleteID sets the "athlete_id" field.
func (m *StravaAccountMutation) SetAthleteID(i int64) {
	m.athlete_id = &i
	m.addathlete_id = nil
}

// AthleteID returns the value of the "athlete_id" field in the mutation.
func (m *StravaAccountMutation) AthleteID() (r int64, exists bool) {
	v := m.athlete_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAthleteID returns the old "athlete_id" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldAthleteID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAthleteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAthleteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAthleteID: %w", err)
	}
	return oldValue.AthleteID, nil
}

// AddAthleteID adds i to the "athlete_id" field.
func (m *StravaAccountMutation) AddAthleteID(i int64) {
	if m.addathlete_id != nil {
		*m.addathlete_id += i
	} else {
		m.addathlete_id = &i
	}
}

// AddedAthleteID returns the value that was added to the "athlete_id" field in this mutation.
func (m *StravaAccountMutation) AddedAthleteID() (r int64, exists bool) {
	v := m.addathlete_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAthleteID resets all changes to the "athlete_id" field.
func (m *StravaAccountMutation) ResetAthleteID() {
	m.athlete_id = nil
	m.addathlete_id = nil
}

// SetAccessToken sets the "access_token" field.
func (m *StravaAccountMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *StravaAccountMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *StravaAccountMutation) ResetAccessToken() {
	m.access_token = nil
}

// SetRefreshToken sets the "refresh_token" field.
func (m *StravaAccountMutation) SetRefreshToken(s string) {
	m.refresh_token = &s
}

// RefreshToken returns the value of the "refresh_token" field in the mutation.
func (m *StravaAccountMutation) RefreshToken() (r string, exists bool) {
	v := m.refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshToken returns the old "refresh_token" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldRefreshToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshToken: %w", err)
	}
	return oldValue.RefreshToken, nil
}

// ResetRefreshToken resets all changes to the "refresh_token" field.
func (m *StravaAccountMutation) ResetRefreshToken() {
	m.refresh_token = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *StravaAccountMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *StravaAccountMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *StravaAccountMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetProfile sets the "profile" field.
func (m *StravaAccountMutation) SetProfile(s string) {
	m.profile = &s
}

// Profile returns the value of the "profile" field in the mutation.
func (m *StravaAccountMutation) Profile() (r string, exists bool) {
	v := m.profile
	if v == nil {
		return
	}
	return *v, true
}

// OldProfile returns the old "profile" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldProfile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfile: %w", err)
	}
	return oldValue.Profile, nil
}

// ResetProfile resets all changes to the "profile" field.
func (m *StravaAccountMutation) ResetProfile() {
	m.profile = nil
}

// SetUsername sets the "username" field.
func (m *StravaAccountMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *StravaAccountMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *StravaAccountMutation) ResetUsername() {
	m.username = nil
}

// SetFirstName sets the "first_name" field.
func (m *StravaAccountMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *StravaAccountMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *StravaAccountMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *StravaAccountMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *StravaAccountMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *StravaAccountMutation) ResetLastName() {
	m.last_name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *StravaAccountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StravaAccountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StravaAccountMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StravaAccountMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StravaAccountMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the StravaAccount entity.
// If the StravaAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaAccountMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StravaAccountMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCdcAuthUsersID sets the "cdc_auth_users" edge to the CdcAuthUsers entity by id.
func (m *StravaAccountMutation) SetCdcAuthUsersID(id uuid.UUID) {
	m.cdc_auth_users = &id
}

// ClearCdcAuthUsers clears the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (m *StravaAccountMutation) ClearCdcAuthUsers() {
	m.clearedcdc_auth_users = true
	m.clearedFields[stravaaccount.FieldUserID] = struct{}{}
}

// CdcAuthUsersCleared reports if the "cdc_auth_users" edge to the CdcAuthUsers entity was cleared.
func (m *StravaAccountMutation) CdcAuthUsersCleared() bool {
	return m.clearedcdc_auth_users
}

// CdcAuthUsersID returns the "cdc_auth_users" edge ID in the mutation.
func (m *StravaAccountMutation) CdcAuthUsersID() (id uuid.UUID, exists bool) {
	if m.cdc_auth_users != nil {
		return *m.cdc_auth_users, true
	}
	return
}

// CdcAuthUsersIDs returns the "cdc_auth_users" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CdcAuthUsersID instead. It exists only for internal usage by the builders.
func (m *StravaAccountMutation) CdcAuthUsersIDs() (ids []uuid.UUID) {
	if id := m.cdc_auth_users; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCdcAuthUsers resets all changes to the "cdc_auth_users" edge.
func (m *StravaAccountMutation) ResetCdcAuthUsers() {
	m.cdc_auth_users = nil
	m.clearedcdc_auth_users = false
}

// Where appends a list predicates to the StravaAccountMutation builder.
func (m *StravaAccountMutation) Where(ps ...predicate.StravaAccount) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StravaAccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StravaAccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StravaAccount, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StravaAccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StravaAccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StravaAccount).
func (m *StravaAccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StravaAccountMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.cdc_auth_users != nil {
		fields = append(fields, stravaaccount.FieldUserID)
	}
	if m.athlete_id != nil {
		fields = append(fields, stravaaccount.FieldAthleteID)
	}
	if m.access_token != nil {
		fields = append(fields, stravaaccount.FieldAccessToken)
	}
	if m.refresh_token != nil {
		fields = append(fields, stravaaccount.FieldRefreshToken)
	}
	if m.expires_at != nil {
		fields = append(fields, stravaaccount.FieldExpiresAt)
	}
	if m.profile != nil {
		fields = append(fields, stravaaccount.FieldProfile)
	}
	if m.username != nil {
		fields = append(fields, stravaaccount.FieldUsername)
	}
	if m.first_name != nil {
		fields = append(fields, stravaaccount.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, stravaaccount.FieldLastName)
	}
	if m.created_at != nil {
		fields = append(fields, stravaaccount.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, stravaaccount.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StravaAccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stravaaccount.FieldUserID:
		return m.UserID()
	case stravaaccount.FieldAthleteID:
		return m.AthleteID()
	case stravaaccount.FieldAccessToken:
		return m.AccessToken()
	case stravaaccount.FieldRefreshToken:
		return m.RefreshToken()
	case stravaaccount.FieldExpiresAt:
		return m.ExpiresAt()
	case stravaaccount.FieldProfile:
		return m.Profile()
	case stravaaccount.FieldUsername:
		return m.Username()
	case stravaaccount.FieldFirstName:
		return m.FirstName()
	case stravaaccount.FieldLastName:
		return m.LastName()
	case stravaaccount.FieldCreatedAt:
		return m.CreatedAt()
	case stravaaccount.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StravaAccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stravaaccount.FieldUserID:
		return m.OldUserID(ctx)
	case stravaaccount.FieldAthleteID:
		return m.OldAthleteID(ctx)
	case stravaaccount.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case stravaaccount.FieldRefreshToken:
		return m.OldRefreshToken(ctx)
	case stravaaccount.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case stravaaccount.FieldProfile:
		return m.OldProfile(ctx)
	case stravaaccount.FieldUsername:
		return m.OldUsername(ctx)
	case stravaaccount.FieldFirstName:
		return m.OldFirstName(ctx)
	case stravaaccount.FieldLastName:
		return m.OldLastName(ctx)
	case stravaaccount.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case stravaaccount.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown StravaAccount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StravaAccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stravaaccount.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case stravaaccount.FieldAthleteID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAthleteID(v)
		return nil
	case stravaaccount.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case stravaaccount.FieldRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshToken(v)
		return nil
	case stravaaccount.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case stravaaccount.FieldProfile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfile(v)
		return nil
	case stravaaccount.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case stravaaccount.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case stravaaccount.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case stravaaccount.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case stravaaccount.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown StravaAccount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StravaAccountMutation) AddedFields() []string {
	var fields []string
	if m.addathlete_id != nil {
		fields = append(fields, stravaaccount.FieldAthleteID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StravaAccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case stravaaccount.FieldAthleteID:
		return m.AddedAthleteID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StravaAccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case stravaaccount.FieldAthleteID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAthleteID(v)
		return nil
	}
	return fmt.Errorf("unknown StravaAccount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StravaAccountMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StravaAccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StravaAccountMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StravaAccount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StravaAccountMutation) ResetField(name string) error {
	switch name {
	case stravaaccount.FieldUserID:
		m.ResetUserID()
		return nil
	case stravaaccount.FieldAthleteID:
		m.ResetAthleteID()
		return nil
	case stravaaccount.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case stravaaccount.FieldRefreshToken:
		m.ResetRefreshToken()
		return nil
	case stravaaccount.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case stravaaccount.FieldProfile:
		m.ResetProfile()
		return nil
	case stravaaccount.FieldUsername:
		m.ResetUsername()
		return nil
	case stravaaccount.FieldFirstName:
		m.ResetFirstName()
		return nil
	case stravaaccount.FieldLastName:
		m.ResetLastName()
		return nil
	case stravaaccount.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case stravaaccount.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown StravaAccount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StravaAccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cdc_auth_users != nil {
		edges = append(edges, stravaaccount.EdgeCdcAuthUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StravaAccountMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case stravaaccount.EdgeCdcAuthUsers:
		if id := m.cdc_auth_users; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StravaAccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StravaAccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StravaAccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcdc_auth_users {
		edges = append(edges, stravaaccount.EdgeCdcAuthUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StravaAccountMutation) EdgeCleared(name string) bool {
	switch name {
	case stravaaccount.EdgeCdcAuthUsers:
		return m.clearedcdc_auth_users
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StravaAccountMutation) ClearEdge(name string) error {
	switch name {
	case stravaaccount.EdgeCdcAuthUsers:
		m.ClearCdcAuthUsers()
		return nil
	}
	return fmt.Errorf("unknown StravaAccount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StravaAccountMutation) ResetEdge(name string) error {
	switch name {
	case stravaaccount.EdgeCdcAuthUsers:
		m.ResetCdcAuthUsers()
		return nil
	}
	return fmt.Errorf("unknown StravaAccount edge %s", name)
}

// StravaActivityMutation represents an operation that mutates the StravaActivity nodes in the graph.
type StravaActivityMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	strava_activity_id      *int64
	addstrava_activity_id   *int64
	athlete_id              *int64
	addathlete_id           *int64
	activity_name           *string
	activity_type           *int
	addactivity_type        *int
	activity_url            *string
	start_date              *time.Time
	distance                *float64
	adddistance             *float64
	moving_time             *int32
	addmoving_time          *int32
	elapsed_time            *int32
	addelapsed_time         *int32
	total_elevation_gain    *float64
	addtotal_elevation_gain *float64
	average_speed           *float64
	addaverage_speed        *float64
	max_speed               *float64
	addmax_speed            *float64
	created_at              *time.Time
	clearedFields           map[string]struct{}
	cdc_auth_users          *uuid.UUID
	clearedcdc_auth_users   bool
	done                    bool
	oldValue                func(context.Context) (*StravaActivity, error)
	predicates              []predicate.StravaActivity
}

var _ ent.Mutation = (*StravaActivityMutation)(nil)

// stravaactivityOption allows management of the mutation configuration using functional options.
type stravaactivityOption func(*StravaActivityMutation)

// newStravaActivityMutation creates new mutation for the StravaActivity entity.
func newStravaActivityMutation(c config, op Op, opts ...stravaactivityOption) *StravaActivityMutation {
	m := &StravaActivityMutation{
		config:        c,
		op:            op,
		typ:           TypeStravaActivity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStravaActivityID sets the ID field of the mutation.
func withStravaActivityID(id uuid.UUID) stravaactivityOption {
	return func(m *StravaActivityMutation) {
		var (
			err   error
			once  sync.Once
			value *StravaActivity
		)
		m.oldValue = func(ctx context.Context) (*StravaActivity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StravaActivity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStravaActivity sets the old StravaActivity of the mutation.
func withStravaActivity(node *StravaActivity) stravaactivityOption {
	return func(m *StravaActivityMutation) {
		m.oldValue = func(context.Context) (*StravaActivity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StravaActivityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StravaActivityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StravaActivity entities.
func (m *StravaActivityMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StravaActivityMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StravaActivityMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StravaActivity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStravaActivityID sets the "strava_activity_id" field.
func (m *StravaActivityMutation) SetStravaActivityID(i int64) {
	m.strava_activity_id = &i
	m.addstrava_activity_id = nil
}

// StravaActivityID returns the value of the "strava_activity_id" field in the mutation.
func (m *StravaActivityMutation) StravaActivityID() (r int64, exists bool) {
	v := m.strava_activity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStravaActivityID returns the old "strava_activity_id" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldStravaActivityID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStravaActivityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStravaActivityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStravaActivityID: %w", err)
	}
	return oldValue.StravaActivityID, nil
}

// AddStravaActivityID adds i to the "strava_activity_id" field.
func (m *StravaActivityMutation) AddStravaActivityID(i int64) {
	if m.addstrava_activity_id != nil {
		*m.addstrava_activity_id += i
	} else {
		m.addstrava_activity_id = &i
	}
}

// AddedStravaActivityID returns the value that was added to the "strava_activity_id" field in this mutation.
func (m *StravaActivityMutation) AddedStravaActivityID() (r int64, exists bool) {
	v := m.addstrava_activity_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetStravaActivityID resets all changes to the "strava_activity_id" field.
func (m *StravaActivityMutation) ResetStravaActivityID() {
	m.strava_activity_id = nil
	m.addstrava_activity_id = nil
}

// SetAthleteID sets the "athlete_id" field.
func (m *StravaActivityMutation) SetAthleteID(i int64) {
	m.athlete_id = &i
	m.addathlete_id = nil
}

// AthleteID returns the value of the "athlete_id" field in the mutation.
func (m *StravaActivityMutation) AthleteID() (r int64, exists bool) {
	v := m.athlete_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAthleteID returns the old "athlete_id" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldAthleteID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAthleteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAthleteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAthleteID: %w", err)
	}
	return oldValue.AthleteID, nil
}

// AddAthleteID adds i to the "athlete_id" field.
func (m *StravaActivityMutation) AddAthleteID(i int64) {
	if m.addathlete_id != nil {
		*m.addathlete_id += i
	} else {
		m.addathlete_id = &i
	}
}

// AddedAthleteID returns the value that was added to the "athlete_id" field in this mutation.
func (m *StravaActivityMutation) AddedAthleteID() (r int64, exists bool) {
	v := m.addathlete_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAthleteID resets all changes to the "athlete_id" field.
func (m *StravaActivityMutation) ResetAthleteID() {
	m.athlete_id = nil
	m.addathlete_id = nil
}

// SetUserID sets the "user_id" field.
func (m *StravaActivityMutation) SetUserID(u uuid.UUID) {
	m.cdc_auth_users = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *StravaActivityMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.cdc_auth_users
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *StravaActivityMutation) ResetUserID() {
	m.cdc_auth_users = nil
}

// SetActivityName sets the "activity_name" field.
func (m *StravaActivityMutation) SetActivityName(s string) {
	m.activity_name = &s
}

// ActivityName returns the value of the "activity_name" field in the mutation.
func (m *StravaActivityMutation) ActivityName() (r string, exists bool) {
	v := m.activity_name
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityName returns the old "activity_name" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldActivityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityName: %w", err)
	}
	return oldValue.ActivityName, nil
}

// ResetActivityName resets all changes to the "activity_name" field.
func (m *StravaActivityMutation) ResetActivityName() {
	m.activity_name = nil
}

// SetActivityType sets the "activity_type" field.
func (m *StravaActivityMutation) SetActivityType(i int) {
	m.activity_type = &i
	m.addactivity_type = nil
}

// ActivityType returns the value of the "activity_type" field in the mutation.
func (m *StravaActivityMutation) ActivityType() (r int, exists bool) {
	v := m.activity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityType returns the old "activity_type" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldActivityType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityType: %w", err)
	}
	return oldValue.ActivityType, nil
}

// AddActivityType adds i to the "activity_type" field.
func (m *StravaActivityMutation) AddActivityType(i int) {
	if m.addactivity_type != nil {
		*m.addactivity_type += i
	} else {
		m.addactivity_type = &i
	}
}

// AddedActivityType returns the value that was added to the "activity_type" field in this mutation.
func (m *StravaActivityMutation) AddedActivityType() (r int, exists bool) {
	v := m.addactivity_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetActivityType resets all changes to the "activity_type" field.
func (m *StravaActivityMutation) ResetActivityType() {
	m.activity_type = nil
	m.addactivity_type = nil
}

// SetActivityURL sets the "activity_url" field.
func (m *StravaActivityMutation) SetActivityURL(s string) {
	m.activity_url = &s
}

// ActivityURL returns the value of the "activity_url" field in the mutation.
func (m *StravaActivityMutation) ActivityURL() (r string, exists bool) {
	v := m.activity_url
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityURL returns the old "activity_url" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldActivityURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityURL: %w", err)
	}
	return oldValue.ActivityURL, nil
}

// ResetActivityURL resets all changes to the "activity_url" field.
func (m *StravaActivityMutation) ResetActivityURL() {
	m.activity_url = nil
}

// SetStartDate sets the "start_date" field.
func (m *StravaActivityMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *StravaActivityMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *StravaActivityMutation) ResetStartDate() {
	m.start_date = nil
}

// SetDistance sets the "distance" field.
func (m *StravaActivityMutation) SetDistance(f float64) {
	m.distance = &f
	m.adddistance = nil
}

// Distance returns the value of the "distance" field in the mutation.
func (m *StravaActivityMutation) Distance() (r float64, exists bool) {
	v := m.distance
	if v == nil {
		return
	}
	return *v, true
}

// OldDistance returns the old "distance" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldDistance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDistance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDistance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistance: %w", err)
	}
	return oldValue.Distance, nil
}

// AddDistance adds f to the "distance" field.
func (m *StravaActivityMutation) AddDistance(f float64) {
	if m.adddistance != nil {
		*m.adddistance += f
	} else {
		m.adddistance = &f
	}
}

// AddedDistance returns the value that was added to the "distance" field in this mutation.
func (m *StravaActivityMutation) AddedDistance() (r float64, exists bool) {
	v := m.adddistance
	if v == nil {
		return
	}
	return *v, true
}

// ResetDistance resets all changes to the "distance" field.
func (m *StravaActivityMutation) ResetDistance() {
	m.distance = nil
	m.adddistance = nil
}

// SetMovingTime sets the "moving_time" field.
func (m *StravaActivityMutation) SetMovingTime(i int32) {
	m.moving_time = &i
	m.addmoving_time = nil
}

// MovingTime returns the value of the "moving_time" field in the mutation.
func (m *StravaActivityMutation) MovingTime() (r int32, exists bool) {
	v := m.moving_time
	if v == nil {
		return
	}
	return *v, true
}

// OldMovingTime returns the old "moving_time" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldMovingTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMovingTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMovingTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMovingTime: %w", err)
	}
	return oldValue.MovingTime, nil
}

// AddMovingTime adds i to the "moving_time" field.
func (m *StravaActivityMutation) AddMovingTime(i int32) {
	if m.addmoving_time != nil {
		*m.addmoving_time += i
	} else {
		m.addmoving_time = &i
	}
}

// AddedMovingTime returns the value that was added to the "moving_time" field in this mutation.
func (m *StravaActivityMutation) AddedMovingTime() (r int32, exists bool) {
	v := m.addmoving_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetMovingTime resets all changes to the "moving_time" field.
func (m *StravaActivityMutation) ResetMovingTime() {
	m.moving_time = nil
	m.addmoving_time = nil
}

// SetElapsedTime sets the "elapsed_time" field.
func (m *StravaActivityMutation) SetElapsedTime(i int32) {
	m.elapsed_time = &i
	m.addelapsed_time = nil
}

// ElapsedTime returns the value of the "elapsed_time" field in the mutation.
func (m *StravaActivityMutation) ElapsedTime() (r int32, exists bool) {
	v := m.elapsed_time
	if v == nil {
		return
	}
	return *v, true
}

// OldElapsedTime returns the old "elapsed_time" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldElapsedTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldElapsedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldElapsedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldElapsedTime: %w", err)
	}
	return oldValue.ElapsedTime, nil
}

// AddElapsedTime adds i to the "elapsed_time" field.
func (m *StravaActivityMutation) AddElapsedTime(i int32) {
	if m.addelapsed_time != nil {
		*m.addelapsed_time += i
	} else {
		m.addelapsed_time = &i
	}
}

// AddedElapsedTime returns the value that was added to the "elapsed_time" field in this mutation.
func (m *StravaActivityMutation) AddedElapsedTime() (r int32, exists bool) {
	v := m.addelapsed_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetElapsedTime resets all changes to the "elapsed_time" field.
func (m *StravaActivityMutation) ResetElapsedTime() {
	m.elapsed_time = nil
	m.addelapsed_time = nil
}

// SetTotalElevationGain sets the "total_elevation_gain" field.
func (m *StravaActivityMutation) SetTotalElevationGain(f float64) {
	m.total_elevation_gain = &f
	m.addtotal_elevation_gain = nil
}

// TotalElevationGain returns the value of the "total_elevation_gain" field in the mutation.
func (m *StravaActivityMutation) TotalElevationGain() (r float64, exists bool) {
	v := m.total_elevation_gain
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalElevationGain returns the old "total_elevation_gain" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldTotalElevationGain(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalElevationGain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalElevationGain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalElevationGain: %w", err)
	}
	return oldValue.TotalElevationGain, nil
}

// AddTotalElevationGain adds f to the "total_elevation_gain" field.
func (m *StravaActivityMutation) AddTotalElevationGain(f float64) {
	if m.addtotal_elevation_gain != nil {
		*m.addtotal_elevation_gain += f
	} else {
		m.addtotal_elevation_gain = &f
	}
}

// AddedTotalElevationGain returns the value that was added to the "total_elevation_gain" field in this mutation.
func (m *StravaActivityMutation) AddedTotalElevationGain() (r float64, exists bool) {
	v := m.addtotal_elevation_gain
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalElevationGain resets all changes to the "total_elevation_gain" field.
func (m *StravaActivityMutation) ResetTotalElevationGain() {
	m.total_elevation_gain = nil
	m.addtotal_elevation_gain = nil
}

// SetAverageSpeed sets the "average_speed" field.
func (m *StravaActivityMutation) SetAverageSpeed(f float64) {
	m.average_speed = &f
	m.addaverage_speed = nil
}

// AverageSpeed returns the value of the "average_speed" field in the mutation.
func (m *StravaActivityMutation) AverageSpeed() (r float64, exists bool) {
	v := m.average_speed
	if v == nil {
		return
	}
	return *v, true
}

// OldAverageSpeed returns the old "average_speed" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldAverageSpeed(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAverageSpeed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAverageSpeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAverageSpeed: %w", err)
	}
	return oldValue.AverageSpeed, nil
}

// AddAverageSpeed adds f to the "average_speed" field.
func (m *StravaActivityMutation) AddAverageSpeed(f float64) {
	if m.addaverage_speed != nil {
		*m.addaverage_speed += f
	} else {
		m.addaverage_speed = &f
	}
}

// AddedAverageSpeed returns the value that was added to the "average_speed" field in this mutation.
func (m *StravaActivityMutation) AddedAverageSpeed() (r float64, exists bool) {
	v := m.addaverage_speed
	if v == nil {
		return
	}
	return *v, true
}

// ResetAverageSpeed resets all changes to the "average_speed" field.
func (m *StravaActivityMutation) ResetAverageSpeed() {
	m.average_speed = nil
	m.addaverage_speed = nil
}

// SetMaxSpeed sets the "max_speed" field.
func (m *StravaActivityMutation) SetMaxSpeed(f float64) {
	m.max_speed = &f
	m.addmax_speed = nil
}

// MaxSpeed returns the value of the "max_speed" field in the mutation.
func (m *StravaActivityMutation) MaxSpeed() (r float64, exists bool) {
	v := m.max_speed
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxSpeed returns the old "max_speed" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldMaxSpeed(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxSpeed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxSpeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxSpeed: %w", err)
	}
	return oldValue.MaxSpeed, nil
}

// AddMaxSpeed adds f to the "max_speed" field.
func (m *StravaActivityMutation) AddMaxSpeed(f float64) {
	if m.addmax_speed != nil {
		*m.addmax_speed += f
	} else {
		m.addmax_speed = &f
	}
}

// AddedMaxSpeed returns the value that was added to the "max_speed" field in this mutation.
func (m *StravaActivityMutation) AddedMaxSpeed() (r float64, exists bool) {
	v := m.addmax_speed
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxSpeed resets all changes to the "max_speed" field.
func (m *StravaActivityMutation) ResetMaxSpeed() {
	m.max_speed = nil
	m.addmax_speed = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *StravaActivityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StravaActivityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the StravaActivity entity.
// If the StravaActivity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StravaActivityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StravaActivityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCdcAuthUsersID sets the "cdc_auth_users" edge to the CdcAuthUsers entity by id.
func (m *StravaActivityMutation) SetCdcAuthUsersID(id uuid.UUID) {
	m.cdc_auth_users = &id
}

// ClearCdcAuthUsers clears the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (m *StravaActivityMutation) ClearCdcAuthUsers() {
	m.clearedcdc_auth_users = true
	m.clearedFields[stravaactivity.FieldUserID] = struct{}{}
}

// CdcAuthUsersCleared reports if the "cdc_auth_users" edge to the CdcAuthUsers entity was cleared.
func (m *StravaActivityMutation) CdcAuthUsersCleared() bool {
	return m.clearedcdc_auth_users
}

// CdcAuthUsersID returns the "cdc_auth_users" edge ID in the mutation.
func (m *StravaActivityMutation) CdcAuthUsersID() (id uuid.UUID, exists bool) {
	if m.cdc_auth_users != nil {
		return *m.cdc_auth_users, true
	}
	return
}

// CdcAuthUsersIDs returns the "cdc_auth_users" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CdcAuthUsersID instead. It exists only for internal usage by the builders.
func (m *StravaActivityMutation) CdcAuthUsersIDs() (ids []uuid.UUID) {
	if id := m.cdc_auth_users; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCdcAuthUsers resets all changes to the "cdc_auth_users" edge.
func (m *StravaActivityMutation) ResetCdcAuthUsers() {
	m.cdc_auth_users = nil
	m.clearedcdc_auth_users = false
}

// Where appends a list predicates to the StravaActivityMutation builder.
func (m *StravaActivityMutation) Where(ps ...predicate.StravaActivity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StravaActivityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StravaActivityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StravaActivity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StravaActivityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StravaActivityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StravaActivity).
func (m *StravaActivityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StravaActivityMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.strava_activity_id != nil {
		fields = append(fields, stravaactivity.FieldStravaActivityID)
	}
	if m.athlete_id != nil {
		fields = append(fields, stravaactivity.FieldAthleteID)
	}
	if m.cdc_auth_users != nil {
		fields = append(fields, stravaactivity.FieldUserID)
	}
	if m.activity_name != nil {
		fields = append(fields, stravaactivity.FieldActivityName)
	}
	if m.activity_type != nil {
		fields = append(fields, stravaactivity.FieldActivityType)
	}
	if m.activity_url != nil {
		fields = append(fields, stravaactivity.FieldActivityURL)
	}
	if m.start_date != nil {
		fields = append(fields, stravaactivity.FieldStartDate)
	}
	if m.distance != nil {
		fields = append(fields, stravaactivity.FieldDistance)
	}
	if m.moving_time != nil {
		fields = append(fields, stravaactivity.FieldMovingTime)
	}
	if m.elapsed_time != nil {
		fields = append(fields, stravaactivity.FieldElapsedTime)
	}
	if m.total_elevation_gain != nil {
		fields = append(fields, stravaactivity.FieldTotalElevationGain)
	}
	if m.average_speed != nil {
		fields = append(fields, stravaactivity.FieldAverageSpeed)
	}
	if m.max_speed != nil {
		fields = append(fields, stravaactivity.FieldMaxSpeed)
	}
	if m.created_at != nil {
		fields = append(fields, stravaactivity.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StravaActivityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stravaactivity.FieldStravaActivityID:
		return m.StravaActivityID()
	case stravaactivity.FieldAthleteID:
		return m.AthleteID()
	case stravaactivity.FieldUserID:
		return m.UserID()
	case stravaactivity.FieldActivityName:
		return m.ActivityName()
	case stravaactivity.FieldActivityType:
		return m.ActivityType()
	case stravaactivity.FieldActivityURL:
		return m.ActivityURL()
	case stravaactivity.FieldStartDate:
		return m.StartDate()
	case stravaactivity.FieldDistance:
		return m.Distance()
	case stravaactivity.FieldMovingTime:
		return m.MovingTime()
	case stravaactivity.FieldElapsedTime:
		return m.ElapsedTime()
	case stravaactivity.FieldTotalElevationGain:
		return m.TotalElevationGain()
	case stravaactivity.FieldAverageSpeed:
		return m.AverageSpeed()
	case stravaactivity.FieldMaxSpeed:
		return m.MaxSpeed()
	case stravaactivity.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StravaActivityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stravaactivity.FieldStravaActivityID:
		return m.OldStravaActivityID(ctx)
	case stravaactivity.FieldAthleteID:
		return m.OldAthleteID(ctx)
	case stravaactivity.FieldUserID:
		return m.OldUserID(ctx)
	case stravaactivity.FieldActivityName:
		return m.OldActivityName(ctx)
	case stravaactivity.FieldActivityType:
		return m.OldActivityType(ctx)
	case stravaactivity.FieldActivityURL:
		return m.OldActivityURL(ctx)
	case stravaactivity.FieldStartDate:
		return m.OldStartDate(ctx)
	case stravaactivity.FieldDistance:
		return m.OldDistance(ctx)
	case stravaactivity.FieldMovingTime:
		return m.OldMovingTime(ctx)
	case stravaactivity.FieldElapsedTime:
		return m.OldElapsedTime(ctx)
	case stravaactivity.FieldTotalElevationGain:
		return m.OldTotalElevationGain(ctx)
	case stravaactivity.FieldAverageSpeed:
		return m.OldAverageSpeed(ctx)
	case stravaactivity.FieldMaxSpeed:
		return m.OldMaxSpeed(ctx)
	case stravaactivity.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown StravaActivity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StravaActivityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stravaactivity.FieldStravaActivityID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStravaActivityID(v)
		return nil
	case stravaactivity.FieldAthleteID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAthleteID(v)
		return nil
	case stravaactivity.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case stravaactivity.FieldActivityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityName(v)
		return nil
	case stravaactivity.FieldActivityType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityType(v)
		return nil
	case stravaactivity.FieldActivityURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityURL(v)
		return nil
	case stravaactivity.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case stravaactivity.FieldDistance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistance(v)
		return nil
	case stravaactivity.FieldMovingTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMovingTime(v)
		return nil
	case stravaactivity.FieldElapsedTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetElapsedTime(v)
		return nil
	case stravaactivity.FieldTotalElevationGain:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalElevationGain(v)
		return nil
	case stravaactivity.FieldAverageSpeed:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAverageSpeed(v)
		return nil
	case stravaactivity.FieldMaxSpeed:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxSpeed(v)
		return nil
	case stravaactivity.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown StravaActivity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StravaActivityMutation) AddedFields() []string {
	var fields []string
	if m.addstrava_activity_id != nil {
		fields = append(fields, stravaactivity.FieldStravaActivityID)
	}
	if m.addathlete_id != nil {
		fields = append(fields, stravaactivity.FieldAthleteID)
	}
	if m.addactivity_type != nil {
		fields = append(fields, stravaactivity.FieldActivityType)
	}
	if m.adddistance != nil {
		fields = append(fields, stravaactivity.FieldDistance)
	}
	if m.addmoving_time != nil {
		fields = append(fields, stravaactivity.FieldMovingTime)
	}
	if m.addelapsed_time != nil {
		fields = append(fields, stravaactivity.FieldElapsedTime)
	}
	if m.addtotal_elevation_gain != nil {
		fields = append(fields, stravaactivity.FieldTotalElevationGain)
	}
	if m.addaverage_speed != nil {
		fields = append(fields, stravaactivity.FieldAverageSpeed)
	}
	if m.addmax_speed != nil {
		fields = append(fields, stravaactivity.FieldMaxSpeed)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StravaActivityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case stravaactivity.FieldStravaActivityID:
		return m.AddedStravaActivityID()
	case stravaactivity.FieldAthleteID:
		return m.AddedAthleteID()
	case stravaactivity.FieldActivityType:
		return m.AddedActivityType()
	case stravaactivity.FieldDistance:
		return m.AddedDistance()
	case stravaactivity.FieldMovingTime:
		return m.AddedMovingTime()
	case stravaactivity.FieldElapsedTime:
		return m.AddedElapsedTime()
	case stravaactivity.FieldTotalElevationGain:
		return m.AddedTotalElevationGain()
	case stravaactivity.FieldAverageSpeed:
		return m.AddedAverageSpeed()
	case stravaactivity.FieldMaxSpeed:
		return m.AddedMaxSpeed()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StravaActivityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case stravaactivity.FieldStravaActivityID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStravaActivityID(v)
		return nil
	case stravaactivity.FieldAthleteID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAthleteID(v)
		return nil
	case stravaactivity.FieldActivityType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActivityType(v)
		return nil
	case stravaactivity.FieldDistance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDistance(v)
		return nil
	case stravaactivity.FieldMovingTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMovingTime(v)
		return nil
	case stravaactivity.FieldElapsedTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddElapsedTime(v)
		return nil
	case stravaactivity.FieldTotalElevationGain:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalElevationGain(v)
		return nil
	case stravaactivity.FieldAverageSpeed:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAverageSpeed(v)
		return nil
	case stravaactivity.FieldMaxSpeed:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxSpeed(v)
		return nil
	}
	return fmt.Errorf("unknown StravaActivity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StravaActivityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StravaActivityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StravaActivityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StravaActivity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StravaActivityMutation) ResetField(name string) error {
	switch name {
	case stravaactivity.FieldStravaActivityID:
		m.ResetStravaActivityID()
		return nil
	case stravaactivity.FieldAthleteID:
		m.ResetAthleteID()
		return nil
	case stravaactivity.FieldUserID:
		m.ResetUserID()
		return nil
	case stravaactivity.FieldActivityName:
		m.ResetActivityName()
		return nil
	case stravaactivity.FieldActivityType:
		m.ResetActivityType()
		return nil
	case stravaactivity.FieldActivityURL:
		m.ResetActivityURL()
		return nil
	case stravaactivity.FieldStartDate:
		m.ResetStartDate()
		return nil
	case stravaactivity.FieldDistance:
		m.ResetDistance()
		return nil
	case stravaactivity.FieldMovingTime:
		m.ResetMovingTime()
		return nil
	case stravaactivity.FieldElapsedTime:
		m.ResetElapsedTime()
		return nil
	case stravaactivity.FieldTotalElevationGain:
		m.ResetTotalElevationGain()
		return nil
	case stravaactivity.FieldAverageSpeed:
		m.ResetAverageSpeed()
		return nil
	case stravaactivity.FieldMaxSpeed:
		m.ResetMaxSpeed()
		return nil
	case stravaactivity.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown StravaActivity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StravaActivityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cdc_auth_users != nil {
		edges = append(edges, stravaactivity.EdgeCdcAuthUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StravaActivityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case stravaactivity.EdgeCdcAuthUsers:
		if id := m.cdc_auth_users; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StravaActivityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StravaActivityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StravaActivityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcdc_auth_users {
		edges = append(edges, stravaactivity.EdgeCdcAuthUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StravaActivityMutation) EdgeCleared(name string) bool {
	switch name {
	case stravaactivity.EdgeCdcAuthUsers:
		return m.clearedcdc_auth_users
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StravaActivityMutation) ClearEdge(name string) error {
	switch name {
	case stravaactivity.EdgeCdcAuthUsers:
		m.ClearCdcAuthUsers()
		return nil
	}
	return fmt.Errorf("unknown StravaActivity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StravaActivityMutation) ResetEdge(name string) error {
	switch name {
	case stravaactivity.EdgeCdcAuthUsers:
		m.ResetCdcAuthUsers()
		return nil
	}
	return fmt.Errorf("unknown StravaActivity edge %s", name)
}
