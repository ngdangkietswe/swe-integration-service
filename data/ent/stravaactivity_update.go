// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/cdcauthusers"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/predicate"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/stravaactivity"
)

// StravaActivityUpdate is the builder for updating StravaActivity entities.
type StravaActivityUpdate struct {
	config
	hooks    []Hook
	mutation *StravaActivityMutation
}

// Where appends a list predicates to the StravaActivityUpdate builder.
func (sau *StravaActivityUpdate) Where(ps ...predicate.StravaActivity) *StravaActivityUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetStravaActivityID sets the "strava_activity_id" field.
func (sau *StravaActivityUpdate) SetStravaActivityID(i int64) *StravaActivityUpdate {
	sau.mutation.ResetStravaActivityID()
	sau.mutation.SetStravaActivityID(i)
	return sau
}

// SetNillableStravaActivityID sets the "strava_activity_id" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableStravaActivityID(i *int64) *StravaActivityUpdate {
	if i != nil {
		sau.SetStravaActivityID(*i)
	}
	return sau
}

// AddStravaActivityID adds i to the "strava_activity_id" field.
func (sau *StravaActivityUpdate) AddStravaActivityID(i int64) *StravaActivityUpdate {
	sau.mutation.AddStravaActivityID(i)
	return sau
}

// SetAthleteID sets the "athlete_id" field.
func (sau *StravaActivityUpdate) SetAthleteID(i int64) *StravaActivityUpdate {
	sau.mutation.ResetAthleteID()
	sau.mutation.SetAthleteID(i)
	return sau
}

// SetNillableAthleteID sets the "athlete_id" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableAthleteID(i *int64) *StravaActivityUpdate {
	if i != nil {
		sau.SetAthleteID(*i)
	}
	return sau
}

// AddAthleteID adds i to the "athlete_id" field.
func (sau *StravaActivityUpdate) AddAthleteID(i int64) *StravaActivityUpdate {
	sau.mutation.AddAthleteID(i)
	return sau
}

// SetUserID sets the "user_id" field.
func (sau *StravaActivityUpdate) SetUserID(u uuid.UUID) *StravaActivityUpdate {
	sau.mutation.SetUserID(u)
	return sau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableUserID(u *uuid.UUID) *StravaActivityUpdate {
	if u != nil {
		sau.SetUserID(*u)
	}
	return sau
}

// SetActivityName sets the "activity_name" field.
func (sau *StravaActivityUpdate) SetActivityName(s string) *StravaActivityUpdate {
	sau.mutation.SetActivityName(s)
	return sau
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableActivityName(s *string) *StravaActivityUpdate {
	if s != nil {
		sau.SetActivityName(*s)
	}
	return sau
}

// SetActivityType sets the "activity_type" field.
func (sau *StravaActivityUpdate) SetActivityType(i int) *StravaActivityUpdate {
	sau.mutation.ResetActivityType()
	sau.mutation.SetActivityType(i)
	return sau
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableActivityType(i *int) *StravaActivityUpdate {
	if i != nil {
		sau.SetActivityType(*i)
	}
	return sau
}

// AddActivityType adds i to the "activity_type" field.
func (sau *StravaActivityUpdate) AddActivityType(i int) *StravaActivityUpdate {
	sau.mutation.AddActivityType(i)
	return sau
}

// SetActivityURL sets the "activity_url" field.
func (sau *StravaActivityUpdate) SetActivityURL(s string) *StravaActivityUpdate {
	sau.mutation.SetActivityURL(s)
	return sau
}

// SetNillableActivityURL sets the "activity_url" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableActivityURL(s *string) *StravaActivityUpdate {
	if s != nil {
		sau.SetActivityURL(*s)
	}
	return sau
}

// SetStartDate sets the "start_date" field.
func (sau *StravaActivityUpdate) SetStartDate(t time.Time) *StravaActivityUpdate {
	sau.mutation.SetStartDate(t)
	return sau
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableStartDate(t *time.Time) *StravaActivityUpdate {
	if t != nil {
		sau.SetStartDate(*t)
	}
	return sau
}

// SetDistance sets the "distance" field.
func (sau *StravaActivityUpdate) SetDistance(f float64) *StravaActivityUpdate {
	sau.mutation.ResetDistance()
	sau.mutation.SetDistance(f)
	return sau
}

// SetNillableDistance sets the "distance" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableDistance(f *float64) *StravaActivityUpdate {
	if f != nil {
		sau.SetDistance(*f)
	}
	return sau
}

// AddDistance adds f to the "distance" field.
func (sau *StravaActivityUpdate) AddDistance(f float64) *StravaActivityUpdate {
	sau.mutation.AddDistance(f)
	return sau
}

// SetMovingTime sets the "moving_time" field.
func (sau *StravaActivityUpdate) SetMovingTime(i int32) *StravaActivityUpdate {
	sau.mutation.ResetMovingTime()
	sau.mutation.SetMovingTime(i)
	return sau
}

// SetNillableMovingTime sets the "moving_time" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableMovingTime(i *int32) *StravaActivityUpdate {
	if i != nil {
		sau.SetMovingTime(*i)
	}
	return sau
}

// AddMovingTime adds i to the "moving_time" field.
func (sau *StravaActivityUpdate) AddMovingTime(i int32) *StravaActivityUpdate {
	sau.mutation.AddMovingTime(i)
	return sau
}

// SetElapsedTime sets the "elapsed_time" field.
func (sau *StravaActivityUpdate) SetElapsedTime(i int32) *StravaActivityUpdate {
	sau.mutation.ResetElapsedTime()
	sau.mutation.SetElapsedTime(i)
	return sau
}

// SetNillableElapsedTime sets the "elapsed_time" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableElapsedTime(i *int32) *StravaActivityUpdate {
	if i != nil {
		sau.SetElapsedTime(*i)
	}
	return sau
}

// AddElapsedTime adds i to the "elapsed_time" field.
func (sau *StravaActivityUpdate) AddElapsedTime(i int32) *StravaActivityUpdate {
	sau.mutation.AddElapsedTime(i)
	return sau
}

// SetTotalElevationGain sets the "total_elevation_gain" field.
func (sau *StravaActivityUpdate) SetTotalElevationGain(f float64) *StravaActivityUpdate {
	sau.mutation.ResetTotalElevationGain()
	sau.mutation.SetTotalElevationGain(f)
	return sau
}

// SetNillableTotalElevationGain sets the "total_elevation_gain" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableTotalElevationGain(f *float64) *StravaActivityUpdate {
	if f != nil {
		sau.SetTotalElevationGain(*f)
	}
	return sau
}

// AddTotalElevationGain adds f to the "total_elevation_gain" field.
func (sau *StravaActivityUpdate) AddTotalElevationGain(f float64) *StravaActivityUpdate {
	sau.mutation.AddTotalElevationGain(f)
	return sau
}

// SetAverageSpeed sets the "average_speed" field.
func (sau *StravaActivityUpdate) SetAverageSpeed(f float64) *StravaActivityUpdate {
	sau.mutation.ResetAverageSpeed()
	sau.mutation.SetAverageSpeed(f)
	return sau
}

// SetNillableAverageSpeed sets the "average_speed" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableAverageSpeed(f *float64) *StravaActivityUpdate {
	if f != nil {
		sau.SetAverageSpeed(*f)
	}
	return sau
}

// AddAverageSpeed adds f to the "average_speed" field.
func (sau *StravaActivityUpdate) AddAverageSpeed(f float64) *StravaActivityUpdate {
	sau.mutation.AddAverageSpeed(f)
	return sau
}

// SetMaxSpeed sets the "max_speed" field.
func (sau *StravaActivityUpdate) SetMaxSpeed(f float64) *StravaActivityUpdate {
	sau.mutation.ResetMaxSpeed()
	sau.mutation.SetMaxSpeed(f)
	return sau
}

// SetNillableMaxSpeed sets the "max_speed" field if the given value is not nil.
func (sau *StravaActivityUpdate) SetNillableMaxSpeed(f *float64) *StravaActivityUpdate {
	if f != nil {
		sau.SetMaxSpeed(*f)
	}
	return sau
}

// AddMaxSpeed adds f to the "max_speed" field.
func (sau *StravaActivityUpdate) AddMaxSpeed(f float64) *StravaActivityUpdate {
	sau.mutation.AddMaxSpeed(f)
	return sau
}

// SetCdcAuthUsersID sets the "cdc_auth_users" edge to the CdcAuthUsers entity by ID.
func (sau *StravaActivityUpdate) SetCdcAuthUsersID(id uuid.UUID) *StravaActivityUpdate {
	sau.mutation.SetCdcAuthUsersID(id)
	return sau
}

// SetCdcAuthUsers sets the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (sau *StravaActivityUpdate) SetCdcAuthUsers(c *CdcAuthUsers) *StravaActivityUpdate {
	return sau.SetCdcAuthUsersID(c.ID)
}

// Mutation returns the StravaActivityMutation object of the builder.
func (sau *StravaActivityUpdate) Mutation() *StravaActivityMutation {
	return sau.mutation
}

// ClearCdcAuthUsers clears the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (sau *StravaActivityUpdate) ClearCdcAuthUsers() *StravaActivityUpdate {
	sau.mutation.ClearCdcAuthUsers()
	return sau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *StravaActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *StravaActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *StravaActivityUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *StravaActivityUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sau *StravaActivityUpdate) check() error {
	if v, ok := sau.mutation.ActivityName(); ok {
		if err := stravaactivity.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "StravaActivity.activity_name": %w`, err)}
		}
	}
	if v, ok := sau.mutation.ActivityURL(); ok {
		if err := stravaactivity.ActivityURLValidator(v); err != nil {
			return &ValidationError{Name: "activity_url", err: fmt.Errorf(`ent: validator failed for field "StravaActivity.activity_url": %w`, err)}
		}
	}
	if sau.mutation.CdcAuthUsersCleared() && len(sau.mutation.CdcAuthUsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StravaActivity.cdc_auth_users"`)
	}
	return nil
}

func (sau *StravaActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stravaactivity.Table, stravaactivity.Columns, sqlgraph.NewFieldSpec(stravaactivity.FieldID, field.TypeUUID))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.StravaActivityID(); ok {
		_spec.SetField(stravaactivity.FieldStravaActivityID, field.TypeInt64, value)
	}
	if value, ok := sau.mutation.AddedStravaActivityID(); ok {
		_spec.AddField(stravaactivity.FieldStravaActivityID, field.TypeInt64, value)
	}
	if value, ok := sau.mutation.AthleteID(); ok {
		_spec.SetField(stravaactivity.FieldAthleteID, field.TypeInt64, value)
	}
	if value, ok := sau.mutation.AddedAthleteID(); ok {
		_spec.AddField(stravaactivity.FieldAthleteID, field.TypeInt64, value)
	}
	if value, ok := sau.mutation.ActivityName(); ok {
		_spec.SetField(stravaactivity.FieldActivityName, field.TypeString, value)
	}
	if value, ok := sau.mutation.ActivityType(); ok {
		_spec.SetField(stravaactivity.FieldActivityType, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedActivityType(); ok {
		_spec.AddField(stravaactivity.FieldActivityType, field.TypeInt, value)
	}
	if value, ok := sau.mutation.ActivityURL(); ok {
		_spec.SetField(stravaactivity.FieldActivityURL, field.TypeString, value)
	}
	if value, ok := sau.mutation.StartDate(); ok {
		_spec.SetField(stravaactivity.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := sau.mutation.Distance(); ok {
		_spec.SetField(stravaactivity.FieldDistance, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AddedDistance(); ok {
		_spec.AddField(stravaactivity.FieldDistance, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.MovingTime(); ok {
		_spec.SetField(stravaactivity.FieldMovingTime, field.TypeInt32, value)
	}
	if value, ok := sau.mutation.AddedMovingTime(); ok {
		_spec.AddField(stravaactivity.FieldMovingTime, field.TypeInt32, value)
	}
	if value, ok := sau.mutation.ElapsedTime(); ok {
		_spec.SetField(stravaactivity.FieldElapsedTime, field.TypeInt32, value)
	}
	if value, ok := sau.mutation.AddedElapsedTime(); ok {
		_spec.AddField(stravaactivity.FieldElapsedTime, field.TypeInt32, value)
	}
	if value, ok := sau.mutation.TotalElevationGain(); ok {
		_spec.SetField(stravaactivity.FieldTotalElevationGain, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AddedTotalElevationGain(); ok {
		_spec.AddField(stravaactivity.FieldTotalElevationGain, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AverageSpeed(); ok {
		_spec.SetField(stravaactivity.FieldAverageSpeed, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AddedAverageSpeed(); ok {
		_spec.AddField(stravaactivity.FieldAverageSpeed, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.MaxSpeed(); ok {
		_spec.SetField(stravaactivity.FieldMaxSpeed, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AddedMaxSpeed(); ok {
		_spec.AddField(stravaactivity.FieldMaxSpeed, field.TypeFloat64, value)
	}
	if sau.mutation.CdcAuthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stravaactivity.CdcAuthUsersTable,
			Columns: []string{stravaactivity.CdcAuthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.CdcAuthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stravaactivity.CdcAuthUsersTable,
			Columns: []string{stravaactivity.CdcAuthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stravaactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// StravaActivityUpdateOne is the builder for updating a single StravaActivity entity.
type StravaActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StravaActivityMutation
}

// SetStravaActivityID sets the "strava_activity_id" field.
func (sauo *StravaActivityUpdateOne) SetStravaActivityID(i int64) *StravaActivityUpdateOne {
	sauo.mutation.ResetStravaActivityID()
	sauo.mutation.SetStravaActivityID(i)
	return sauo
}

// SetNillableStravaActivityID sets the "strava_activity_id" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableStravaActivityID(i *int64) *StravaActivityUpdateOne {
	if i != nil {
		sauo.SetStravaActivityID(*i)
	}
	return sauo
}

// AddStravaActivityID adds i to the "strava_activity_id" field.
func (sauo *StravaActivityUpdateOne) AddStravaActivityID(i int64) *StravaActivityUpdateOne {
	sauo.mutation.AddStravaActivityID(i)
	return sauo
}

// SetAthleteID sets the "athlete_id" field.
func (sauo *StravaActivityUpdateOne) SetAthleteID(i int64) *StravaActivityUpdateOne {
	sauo.mutation.ResetAthleteID()
	sauo.mutation.SetAthleteID(i)
	return sauo
}

// SetNillableAthleteID sets the "athlete_id" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableAthleteID(i *int64) *StravaActivityUpdateOne {
	if i != nil {
		sauo.SetAthleteID(*i)
	}
	return sauo
}

// AddAthleteID adds i to the "athlete_id" field.
func (sauo *StravaActivityUpdateOne) AddAthleteID(i int64) *StravaActivityUpdateOne {
	sauo.mutation.AddAthleteID(i)
	return sauo
}

// SetUserID sets the "user_id" field.
func (sauo *StravaActivityUpdateOne) SetUserID(u uuid.UUID) *StravaActivityUpdateOne {
	sauo.mutation.SetUserID(u)
	return sauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableUserID(u *uuid.UUID) *StravaActivityUpdateOne {
	if u != nil {
		sauo.SetUserID(*u)
	}
	return sauo
}

// SetActivityName sets the "activity_name" field.
func (sauo *StravaActivityUpdateOne) SetActivityName(s string) *StravaActivityUpdateOne {
	sauo.mutation.SetActivityName(s)
	return sauo
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableActivityName(s *string) *StravaActivityUpdateOne {
	if s != nil {
		sauo.SetActivityName(*s)
	}
	return sauo
}

// SetActivityType sets the "activity_type" field.
func (sauo *StravaActivityUpdateOne) SetActivityType(i int) *StravaActivityUpdateOne {
	sauo.mutation.ResetActivityType()
	sauo.mutation.SetActivityType(i)
	return sauo
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableActivityType(i *int) *StravaActivityUpdateOne {
	if i != nil {
		sauo.SetActivityType(*i)
	}
	return sauo
}

// AddActivityType adds i to the "activity_type" field.
func (sauo *StravaActivityUpdateOne) AddActivityType(i int) *StravaActivityUpdateOne {
	sauo.mutation.AddActivityType(i)
	return sauo
}

// SetActivityURL sets the "activity_url" field.
func (sauo *StravaActivityUpdateOne) SetActivityURL(s string) *StravaActivityUpdateOne {
	sauo.mutation.SetActivityURL(s)
	return sauo
}

// SetNillableActivityURL sets the "activity_url" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableActivityURL(s *string) *StravaActivityUpdateOne {
	if s != nil {
		sauo.SetActivityURL(*s)
	}
	return sauo
}

// SetStartDate sets the "start_date" field.
func (sauo *StravaActivityUpdateOne) SetStartDate(t time.Time) *StravaActivityUpdateOne {
	sauo.mutation.SetStartDate(t)
	return sauo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableStartDate(t *time.Time) *StravaActivityUpdateOne {
	if t != nil {
		sauo.SetStartDate(*t)
	}
	return sauo
}

// SetDistance sets the "distance" field.
func (sauo *StravaActivityUpdateOne) SetDistance(f float64) *StravaActivityUpdateOne {
	sauo.mutation.ResetDistance()
	sauo.mutation.SetDistance(f)
	return sauo
}

// SetNillableDistance sets the "distance" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableDistance(f *float64) *StravaActivityUpdateOne {
	if f != nil {
		sauo.SetDistance(*f)
	}
	return sauo
}

// AddDistance adds f to the "distance" field.
func (sauo *StravaActivityUpdateOne) AddDistance(f float64) *StravaActivityUpdateOne {
	sauo.mutation.AddDistance(f)
	return sauo
}

// SetMovingTime sets the "moving_time" field.
func (sauo *StravaActivityUpdateOne) SetMovingTime(i int32) *StravaActivityUpdateOne {
	sauo.mutation.ResetMovingTime()
	sauo.mutation.SetMovingTime(i)
	return sauo
}

// SetNillableMovingTime sets the "moving_time" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableMovingTime(i *int32) *StravaActivityUpdateOne {
	if i != nil {
		sauo.SetMovingTime(*i)
	}
	return sauo
}

// AddMovingTime adds i to the "moving_time" field.
func (sauo *StravaActivityUpdateOne) AddMovingTime(i int32) *StravaActivityUpdateOne {
	sauo.mutation.AddMovingTime(i)
	return sauo
}

// SetElapsedTime sets the "elapsed_time" field.
func (sauo *StravaActivityUpdateOne) SetElapsedTime(i int32) *StravaActivityUpdateOne {
	sauo.mutation.ResetElapsedTime()
	sauo.mutation.SetElapsedTime(i)
	return sauo
}

// SetNillableElapsedTime sets the "elapsed_time" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableElapsedTime(i *int32) *StravaActivityUpdateOne {
	if i != nil {
		sauo.SetElapsedTime(*i)
	}
	return sauo
}

// AddElapsedTime adds i to the "elapsed_time" field.
func (sauo *StravaActivityUpdateOne) AddElapsedTime(i int32) *StravaActivityUpdateOne {
	sauo.mutation.AddElapsedTime(i)
	return sauo
}

// SetTotalElevationGain sets the "total_elevation_gain" field.
func (sauo *StravaActivityUpdateOne) SetTotalElevationGain(f float64) *StravaActivityUpdateOne {
	sauo.mutation.ResetTotalElevationGain()
	sauo.mutation.SetTotalElevationGain(f)
	return sauo
}

// SetNillableTotalElevationGain sets the "total_elevation_gain" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableTotalElevationGain(f *float64) *StravaActivityUpdateOne {
	if f != nil {
		sauo.SetTotalElevationGain(*f)
	}
	return sauo
}

// AddTotalElevationGain adds f to the "total_elevation_gain" field.
func (sauo *StravaActivityUpdateOne) AddTotalElevationGain(f float64) *StravaActivityUpdateOne {
	sauo.mutation.AddTotalElevationGain(f)
	return sauo
}

// SetAverageSpeed sets the "average_speed" field.
func (sauo *StravaActivityUpdateOne) SetAverageSpeed(f float64) *StravaActivityUpdateOne {
	sauo.mutation.ResetAverageSpeed()
	sauo.mutation.SetAverageSpeed(f)
	return sauo
}

// SetNillableAverageSpeed sets the "average_speed" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableAverageSpeed(f *float64) *StravaActivityUpdateOne {
	if f != nil {
		sauo.SetAverageSpeed(*f)
	}
	return sauo
}

// AddAverageSpeed adds f to the "average_speed" field.
func (sauo *StravaActivityUpdateOne) AddAverageSpeed(f float64) *StravaActivityUpdateOne {
	sauo.mutation.AddAverageSpeed(f)
	return sauo
}

// SetMaxSpeed sets the "max_speed" field.
func (sauo *StravaActivityUpdateOne) SetMaxSpeed(f float64) *StravaActivityUpdateOne {
	sauo.mutation.ResetMaxSpeed()
	sauo.mutation.SetMaxSpeed(f)
	return sauo
}

// SetNillableMaxSpeed sets the "max_speed" field if the given value is not nil.
func (sauo *StravaActivityUpdateOne) SetNillableMaxSpeed(f *float64) *StravaActivityUpdateOne {
	if f != nil {
		sauo.SetMaxSpeed(*f)
	}
	return sauo
}

// AddMaxSpeed adds f to the "max_speed" field.
func (sauo *StravaActivityUpdateOne) AddMaxSpeed(f float64) *StravaActivityUpdateOne {
	sauo.mutation.AddMaxSpeed(f)
	return sauo
}

// SetCdcAuthUsersID sets the "cdc_auth_users" edge to the CdcAuthUsers entity by ID.
func (sauo *StravaActivityUpdateOne) SetCdcAuthUsersID(id uuid.UUID) *StravaActivityUpdateOne {
	sauo.mutation.SetCdcAuthUsersID(id)
	return sauo
}

// SetCdcAuthUsers sets the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (sauo *StravaActivityUpdateOne) SetCdcAuthUsers(c *CdcAuthUsers) *StravaActivityUpdateOne {
	return sauo.SetCdcAuthUsersID(c.ID)
}

// Mutation returns the StravaActivityMutation object of the builder.
func (sauo *StravaActivityUpdateOne) Mutation() *StravaActivityMutation {
	return sauo.mutation
}

// ClearCdcAuthUsers clears the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (sauo *StravaActivityUpdateOne) ClearCdcAuthUsers() *StravaActivityUpdateOne {
	sauo.mutation.ClearCdcAuthUsers()
	return sauo
}

// Where appends a list predicates to the StravaActivityUpdate builder.
func (sauo *StravaActivityUpdateOne) Where(ps ...predicate.StravaActivity) *StravaActivityUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *StravaActivityUpdateOne) Select(field string, fields ...string) *StravaActivityUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated StravaActivity entity.
func (sauo *StravaActivityUpdateOne) Save(ctx context.Context) (*StravaActivity, error) {
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *StravaActivityUpdateOne) SaveX(ctx context.Context) *StravaActivity {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *StravaActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *StravaActivityUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sauo *StravaActivityUpdateOne) check() error {
	if v, ok := sauo.mutation.ActivityName(); ok {
		if err := stravaactivity.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "StravaActivity.activity_name": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.ActivityURL(); ok {
		if err := stravaactivity.ActivityURLValidator(v); err != nil {
			return &ValidationError{Name: "activity_url", err: fmt.Errorf(`ent: validator failed for field "StravaActivity.activity_url": %w`, err)}
		}
	}
	if sauo.mutation.CdcAuthUsersCleared() && len(sauo.mutation.CdcAuthUsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StravaActivity.cdc_auth_users"`)
	}
	return nil
}

func (sauo *StravaActivityUpdateOne) sqlSave(ctx context.Context) (_node *StravaActivity, err error) {
	if err := sauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stravaactivity.Table, stravaactivity.Columns, sqlgraph.NewFieldSpec(stravaactivity.FieldID, field.TypeUUID))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StravaActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stravaactivity.FieldID)
		for _, f := range fields {
			if !stravaactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stravaactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.StravaActivityID(); ok {
		_spec.SetField(stravaactivity.FieldStravaActivityID, field.TypeInt64, value)
	}
	if value, ok := sauo.mutation.AddedStravaActivityID(); ok {
		_spec.AddField(stravaactivity.FieldStravaActivityID, field.TypeInt64, value)
	}
	if value, ok := sauo.mutation.AthleteID(); ok {
		_spec.SetField(stravaactivity.FieldAthleteID, field.TypeInt64, value)
	}
	if value, ok := sauo.mutation.AddedAthleteID(); ok {
		_spec.AddField(stravaactivity.FieldAthleteID, field.TypeInt64, value)
	}
	if value, ok := sauo.mutation.ActivityName(); ok {
		_spec.SetField(stravaactivity.FieldActivityName, field.TypeString, value)
	}
	if value, ok := sauo.mutation.ActivityType(); ok {
		_spec.SetField(stravaactivity.FieldActivityType, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedActivityType(); ok {
		_spec.AddField(stravaactivity.FieldActivityType, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.ActivityURL(); ok {
		_spec.SetField(stravaactivity.FieldActivityURL, field.TypeString, value)
	}
	if value, ok := sauo.mutation.StartDate(); ok {
		_spec.SetField(stravaactivity.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := sauo.mutation.Distance(); ok {
		_spec.SetField(stravaactivity.FieldDistance, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AddedDistance(); ok {
		_spec.AddField(stravaactivity.FieldDistance, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.MovingTime(); ok {
		_spec.SetField(stravaactivity.FieldMovingTime, field.TypeInt32, value)
	}
	if value, ok := sauo.mutation.AddedMovingTime(); ok {
		_spec.AddField(stravaactivity.FieldMovingTime, field.TypeInt32, value)
	}
	if value, ok := sauo.mutation.ElapsedTime(); ok {
		_spec.SetField(stravaactivity.FieldElapsedTime, field.TypeInt32, value)
	}
	if value, ok := sauo.mutation.AddedElapsedTime(); ok {
		_spec.AddField(stravaactivity.FieldElapsedTime, field.TypeInt32, value)
	}
	if value, ok := sauo.mutation.TotalElevationGain(); ok {
		_spec.SetField(stravaactivity.FieldTotalElevationGain, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AddedTotalElevationGain(); ok {
		_spec.AddField(stravaactivity.FieldTotalElevationGain, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AverageSpeed(); ok {
		_spec.SetField(stravaactivity.FieldAverageSpeed, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AddedAverageSpeed(); ok {
		_spec.AddField(stravaactivity.FieldAverageSpeed, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.MaxSpeed(); ok {
		_spec.SetField(stravaactivity.FieldMaxSpeed, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AddedMaxSpeed(); ok {
		_spec.AddField(stravaactivity.FieldMaxSpeed, field.TypeFloat64, value)
	}
	if sauo.mutation.CdcAuthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stravaactivity.CdcAuthUsersTable,
			Columns: []string{stravaactivity.CdcAuthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.CdcAuthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stravaactivity.CdcAuthUsersTable,
			Columns: []string{stravaactivity.CdcAuthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StravaActivity{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stravaactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
