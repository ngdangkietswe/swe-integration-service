// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/cdcauthusers"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/predicate"
	"github.com/ngdangkietswe/swe-integration-service/data/ent/stravaaccount"
)

// StravaAccountUpdate is the builder for updating StravaAccount entities.
type StravaAccountUpdate struct {
	config
	hooks    []Hook
	mutation *StravaAccountMutation
}

// Where appends a list predicates to the StravaAccountUpdate builder.
func (sau *StravaAccountUpdate) Where(ps ...predicate.StravaAccount) *StravaAccountUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetUserID sets the "user_id" field.
func (sau *StravaAccountUpdate) SetUserID(u uuid.UUID) *StravaAccountUpdate {
	sau.mutation.SetUserID(u)
	return sau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sau *StravaAccountUpdate) SetNillableUserID(u *uuid.UUID) *StravaAccountUpdate {
	if u != nil {
		sau.SetUserID(*u)
	}
	return sau
}

// SetAthleteID sets the "athlete_id" field.
func (sau *StravaAccountUpdate) SetAthleteID(i int64) *StravaAccountUpdate {
	sau.mutation.ResetAthleteID()
	sau.mutation.SetAthleteID(i)
	return sau
}

// SetNillableAthleteID sets the "athlete_id" field if the given value is not nil.
func (sau *StravaAccountUpdate) SetNillableAthleteID(i *int64) *StravaAccountUpdate {
	if i != nil {
		sau.SetAthleteID(*i)
	}
	return sau
}

// AddAthleteID adds i to the "athlete_id" field.
func (sau *StravaAccountUpdate) AddAthleteID(i int64) *StravaAccountUpdate {
	sau.mutation.AddAthleteID(i)
	return sau
}

// SetAccessToken sets the "access_token" field.
func (sau *StravaAccountUpdate) SetAccessToken(s string) *StravaAccountUpdate {
	sau.mutation.SetAccessToken(s)
	return sau
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (sau *StravaAccountUpdate) SetNillableAccessToken(s *string) *StravaAccountUpdate {
	if s != nil {
		sau.SetAccessToken(*s)
	}
	return sau
}

// SetRefreshToken sets the "refresh_token" field.
func (sau *StravaAccountUpdate) SetRefreshToken(s string) *StravaAccountUpdate {
	sau.mutation.SetRefreshToken(s)
	return sau
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (sau *StravaAccountUpdate) SetNillableRefreshToken(s *string) *StravaAccountUpdate {
	if s != nil {
		sau.SetRefreshToken(*s)
	}
	return sau
}

// SetExpiresAt sets the "expires_at" field.
func (sau *StravaAccountUpdate) SetExpiresAt(t time.Time) *StravaAccountUpdate {
	sau.mutation.SetExpiresAt(t)
	return sau
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (sau *StravaAccountUpdate) SetNillableExpiresAt(t *time.Time) *StravaAccountUpdate {
	if t != nil {
		sau.SetExpiresAt(*t)
	}
	return sau
}

// SetProfile sets the "profile" field.
func (sau *StravaAccountUpdate) SetProfile(s string) *StravaAccountUpdate {
	sau.mutation.SetProfile(s)
	return sau
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (sau *StravaAccountUpdate) SetNillableProfile(s *string) *StravaAccountUpdate {
	if s != nil {
		sau.SetProfile(*s)
	}
	return sau
}

// SetUsername sets the "username" field.
func (sau *StravaAccountUpdate) SetUsername(s string) *StravaAccountUpdate {
	sau.mutation.SetUsername(s)
	return sau
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (sau *StravaAccountUpdate) SetNillableUsername(s *string) *StravaAccountUpdate {
	if s != nil {
		sau.SetUsername(*s)
	}
	return sau
}

// SetFirstName sets the "first_name" field.
func (sau *StravaAccountUpdate) SetFirstName(s string) *StravaAccountUpdate {
	sau.mutation.SetFirstName(s)
	return sau
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (sau *StravaAccountUpdate) SetNillableFirstName(s *string) *StravaAccountUpdate {
	if s != nil {
		sau.SetFirstName(*s)
	}
	return sau
}

// SetLastName sets the "last_name" field.
func (sau *StravaAccountUpdate) SetLastName(s string) *StravaAccountUpdate {
	sau.mutation.SetLastName(s)
	return sau
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (sau *StravaAccountUpdate) SetNillableLastName(s *string) *StravaAccountUpdate {
	if s != nil {
		sau.SetLastName(*s)
	}
	return sau
}

// SetUpdatedAt sets the "updated_at" field.
func (sau *StravaAccountUpdate) SetUpdatedAt(t time.Time) *StravaAccountUpdate {
	sau.mutation.SetUpdatedAt(t)
	return sau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sau *StravaAccountUpdate) SetNillableUpdatedAt(t *time.Time) *StravaAccountUpdate {
	if t != nil {
		sau.SetUpdatedAt(*t)
	}
	return sau
}

// SetCdcAuthUsersID sets the "cdc_auth_users" edge to the CdcAuthUsers entity by ID.
func (sau *StravaAccountUpdate) SetCdcAuthUsersID(id uuid.UUID) *StravaAccountUpdate {
	sau.mutation.SetCdcAuthUsersID(id)
	return sau
}

// SetCdcAuthUsers sets the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (sau *StravaAccountUpdate) SetCdcAuthUsers(c *CdcAuthUsers) *StravaAccountUpdate {
	return sau.SetCdcAuthUsersID(c.ID)
}

// Mutation returns the StravaAccountMutation object of the builder.
func (sau *StravaAccountUpdate) Mutation() *StravaAccountMutation {
	return sau.mutation
}

// ClearCdcAuthUsers clears the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (sau *StravaAccountUpdate) ClearCdcAuthUsers() *StravaAccountUpdate {
	sau.mutation.ClearCdcAuthUsers()
	return sau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *StravaAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *StravaAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *StravaAccountUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *StravaAccountUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sau *StravaAccountUpdate) check() error {
	if v, ok := sau.mutation.AccessToken(); ok {
		if err := stravaaccount.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.access_token": %w`, err)}
		}
	}
	if v, ok := sau.mutation.RefreshToken(); ok {
		if err := stravaaccount.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.refresh_token": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Profile(); ok {
		if err := stravaaccount.ProfileValidator(v); err != nil {
			return &ValidationError{Name: "profile", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.profile": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Username(); ok {
		if err := stravaaccount.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.username": %w`, err)}
		}
	}
	if v, ok := sau.mutation.FirstName(); ok {
		if err := stravaaccount.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.first_name": %w`, err)}
		}
	}
	if v, ok := sau.mutation.LastName(); ok {
		if err := stravaaccount.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.last_name": %w`, err)}
		}
	}
	if sau.mutation.CdcAuthUsersCleared() && len(sau.mutation.CdcAuthUsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StravaAccount.cdc_auth_users"`)
	}
	return nil
}

func (sau *StravaAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stravaaccount.Table, stravaaccount.Columns, sqlgraph.NewFieldSpec(stravaaccount.FieldID, field.TypeUUID))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.AthleteID(); ok {
		_spec.SetField(stravaaccount.FieldAthleteID, field.TypeInt64, value)
	}
	if value, ok := sau.mutation.AddedAthleteID(); ok {
		_spec.AddField(stravaaccount.FieldAthleteID, field.TypeInt64, value)
	}
	if value, ok := sau.mutation.AccessToken(); ok {
		_spec.SetField(stravaaccount.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := sau.mutation.RefreshToken(); ok {
		_spec.SetField(stravaaccount.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := sau.mutation.ExpiresAt(); ok {
		_spec.SetField(stravaaccount.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := sau.mutation.Profile(); ok {
		_spec.SetField(stravaaccount.FieldProfile, field.TypeString, value)
	}
	if value, ok := sau.mutation.Username(); ok {
		_spec.SetField(stravaaccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := sau.mutation.FirstName(); ok {
		_spec.SetField(stravaaccount.FieldFirstName, field.TypeString, value)
	}
	if value, ok := sau.mutation.LastName(); ok {
		_spec.SetField(stravaaccount.FieldLastName, field.TypeString, value)
	}
	if value, ok := sau.mutation.UpdatedAt(); ok {
		_spec.SetField(stravaaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if sau.mutation.CdcAuthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stravaaccount.CdcAuthUsersTable,
			Columns: []string{stravaaccount.CdcAuthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.CdcAuthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stravaaccount.CdcAuthUsersTable,
			Columns: []string{stravaaccount.CdcAuthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stravaaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// StravaAccountUpdateOne is the builder for updating a single StravaAccount entity.
type StravaAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StravaAccountMutation
}

// SetUserID sets the "user_id" field.
func (sauo *StravaAccountUpdateOne) SetUserID(u uuid.UUID) *StravaAccountUpdateOne {
	sauo.mutation.SetUserID(u)
	return sauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sauo *StravaAccountUpdateOne) SetNillableUserID(u *uuid.UUID) *StravaAccountUpdateOne {
	if u != nil {
		sauo.SetUserID(*u)
	}
	return sauo
}

// SetAthleteID sets the "athlete_id" field.
func (sauo *StravaAccountUpdateOne) SetAthleteID(i int64) *StravaAccountUpdateOne {
	sauo.mutation.ResetAthleteID()
	sauo.mutation.SetAthleteID(i)
	return sauo
}

// SetNillableAthleteID sets the "athlete_id" field if the given value is not nil.
func (sauo *StravaAccountUpdateOne) SetNillableAthleteID(i *int64) *StravaAccountUpdateOne {
	if i != nil {
		sauo.SetAthleteID(*i)
	}
	return sauo
}

// AddAthleteID adds i to the "athlete_id" field.
func (sauo *StravaAccountUpdateOne) AddAthleteID(i int64) *StravaAccountUpdateOne {
	sauo.mutation.AddAthleteID(i)
	return sauo
}

// SetAccessToken sets the "access_token" field.
func (sauo *StravaAccountUpdateOne) SetAccessToken(s string) *StravaAccountUpdateOne {
	sauo.mutation.SetAccessToken(s)
	return sauo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (sauo *StravaAccountUpdateOne) SetNillableAccessToken(s *string) *StravaAccountUpdateOne {
	if s != nil {
		sauo.SetAccessToken(*s)
	}
	return sauo
}

// SetRefreshToken sets the "refresh_token" field.
func (sauo *StravaAccountUpdateOne) SetRefreshToken(s string) *StravaAccountUpdateOne {
	sauo.mutation.SetRefreshToken(s)
	return sauo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (sauo *StravaAccountUpdateOne) SetNillableRefreshToken(s *string) *StravaAccountUpdateOne {
	if s != nil {
		sauo.SetRefreshToken(*s)
	}
	return sauo
}

// SetExpiresAt sets the "expires_at" field.
func (sauo *StravaAccountUpdateOne) SetExpiresAt(t time.Time) *StravaAccountUpdateOne {
	sauo.mutation.SetExpiresAt(t)
	return sauo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (sauo *StravaAccountUpdateOne) SetNillableExpiresAt(t *time.Time) *StravaAccountUpdateOne {
	if t != nil {
		sauo.SetExpiresAt(*t)
	}
	return sauo
}

// SetProfile sets the "profile" field.
func (sauo *StravaAccountUpdateOne) SetProfile(s string) *StravaAccountUpdateOne {
	sauo.mutation.SetProfile(s)
	return sauo
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (sauo *StravaAccountUpdateOne) SetNillableProfile(s *string) *StravaAccountUpdateOne {
	if s != nil {
		sauo.SetProfile(*s)
	}
	return sauo
}

// SetUsername sets the "username" field.
func (sauo *StravaAccountUpdateOne) SetUsername(s string) *StravaAccountUpdateOne {
	sauo.mutation.SetUsername(s)
	return sauo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (sauo *StravaAccountUpdateOne) SetNillableUsername(s *string) *StravaAccountUpdateOne {
	if s != nil {
		sauo.SetUsername(*s)
	}
	return sauo
}

// SetFirstName sets the "first_name" field.
func (sauo *StravaAccountUpdateOne) SetFirstName(s string) *StravaAccountUpdateOne {
	sauo.mutation.SetFirstName(s)
	return sauo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (sauo *StravaAccountUpdateOne) SetNillableFirstName(s *string) *StravaAccountUpdateOne {
	if s != nil {
		sauo.SetFirstName(*s)
	}
	return sauo
}

// SetLastName sets the "last_name" field.
func (sauo *StravaAccountUpdateOne) SetLastName(s string) *StravaAccountUpdateOne {
	sauo.mutation.SetLastName(s)
	return sauo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (sauo *StravaAccountUpdateOne) SetNillableLastName(s *string) *StravaAccountUpdateOne {
	if s != nil {
		sauo.SetLastName(*s)
	}
	return sauo
}

// SetUpdatedAt sets the "updated_at" field.
func (sauo *StravaAccountUpdateOne) SetUpdatedAt(t time.Time) *StravaAccountUpdateOne {
	sauo.mutation.SetUpdatedAt(t)
	return sauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sauo *StravaAccountUpdateOne) SetNillableUpdatedAt(t *time.Time) *StravaAccountUpdateOne {
	if t != nil {
		sauo.SetUpdatedAt(*t)
	}
	return sauo
}

// SetCdcAuthUsersID sets the "cdc_auth_users" edge to the CdcAuthUsers entity by ID.
func (sauo *StravaAccountUpdateOne) SetCdcAuthUsersID(id uuid.UUID) *StravaAccountUpdateOne {
	sauo.mutation.SetCdcAuthUsersID(id)
	return sauo
}

// SetCdcAuthUsers sets the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (sauo *StravaAccountUpdateOne) SetCdcAuthUsers(c *CdcAuthUsers) *StravaAccountUpdateOne {
	return sauo.SetCdcAuthUsersID(c.ID)
}

// Mutation returns the StravaAccountMutation object of the builder.
func (sauo *StravaAccountUpdateOne) Mutation() *StravaAccountMutation {
	return sauo.mutation
}

// ClearCdcAuthUsers clears the "cdc_auth_users" edge to the CdcAuthUsers entity.
func (sauo *StravaAccountUpdateOne) ClearCdcAuthUsers() *StravaAccountUpdateOne {
	sauo.mutation.ClearCdcAuthUsers()
	return sauo
}

// Where appends a list predicates to the StravaAccountUpdate builder.
func (sauo *StravaAccountUpdateOne) Where(ps ...predicate.StravaAccount) *StravaAccountUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *StravaAccountUpdateOne) Select(field string, fields ...string) *StravaAccountUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated StravaAccount entity.
func (sauo *StravaAccountUpdateOne) Save(ctx context.Context) (*StravaAccount, error) {
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *StravaAccountUpdateOne) SaveX(ctx context.Context) *StravaAccount {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *StravaAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *StravaAccountUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sauo *StravaAccountUpdateOne) check() error {
	if v, ok := sauo.mutation.AccessToken(); ok {
		if err := stravaaccount.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.access_token": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.RefreshToken(); ok {
		if err := stravaaccount.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.refresh_token": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Profile(); ok {
		if err := stravaaccount.ProfileValidator(v); err != nil {
			return &ValidationError{Name: "profile", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.profile": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Username(); ok {
		if err := stravaaccount.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.username": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.FirstName(); ok {
		if err := stravaaccount.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.first_name": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.LastName(); ok {
		if err := stravaaccount.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "StravaAccount.last_name": %w`, err)}
		}
	}
	if sauo.mutation.CdcAuthUsersCleared() && len(sauo.mutation.CdcAuthUsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StravaAccount.cdc_auth_users"`)
	}
	return nil
}

func (sauo *StravaAccountUpdateOne) sqlSave(ctx context.Context) (_node *StravaAccount, err error) {
	if err := sauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stravaaccount.Table, stravaaccount.Columns, sqlgraph.NewFieldSpec(stravaaccount.FieldID, field.TypeUUID))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StravaAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stravaaccount.FieldID)
		for _, f := range fields {
			if !stravaaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stravaaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.AthleteID(); ok {
		_spec.SetField(stravaaccount.FieldAthleteID, field.TypeInt64, value)
	}
	if value, ok := sauo.mutation.AddedAthleteID(); ok {
		_spec.AddField(stravaaccount.FieldAthleteID, field.TypeInt64, value)
	}
	if value, ok := sauo.mutation.AccessToken(); ok {
		_spec.SetField(stravaaccount.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := sauo.mutation.RefreshToken(); ok {
		_spec.SetField(stravaaccount.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := sauo.mutation.ExpiresAt(); ok {
		_spec.SetField(stravaaccount.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := sauo.mutation.Profile(); ok {
		_spec.SetField(stravaaccount.FieldProfile, field.TypeString, value)
	}
	if value, ok := sauo.mutation.Username(); ok {
		_spec.SetField(stravaaccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := sauo.mutation.FirstName(); ok {
		_spec.SetField(stravaaccount.FieldFirstName, field.TypeString, value)
	}
	if value, ok := sauo.mutation.LastName(); ok {
		_spec.SetField(stravaaccount.FieldLastName, field.TypeString, value)
	}
	if value, ok := sauo.mutation.UpdatedAt(); ok {
		_spec.SetField(stravaaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if sauo.mutation.CdcAuthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stravaaccount.CdcAuthUsersTable,
			Columns: []string{stravaaccount.CdcAuthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.CdcAuthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stravaaccount.CdcAuthUsersTable,
			Columns: []string{stravaaccount.CdcAuthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StravaAccount{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stravaaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
